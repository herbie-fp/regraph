"NEW BATCH"
(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
"NEW BATCH"
(log (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(exp (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(* (cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))) (cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))))
(cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(* (* (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(sqrt (* (* 2.0 n) U))
(sqrt (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ (* l l) Om)) 3)) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ (* t t) (+ (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om))) (* t (* 2.0 (/ (* l l) Om))))) (* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3)))))))
(sqrt (* (+ (* t t) (+ (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om))) (* t (* 2.0 (/ (* l l) Om))))) (+ (* U U) (+ (* U* U*) (* U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ (* l l) Om)) 3)) (+ U U*)) (* (+ (* t t) (+ (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om))) (* t (* 2.0 (/ (* l l) Om))))) (* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*)))))))
(sqrt (* (+ (* t t) (+ (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om))) (* t (* 2.0 (/ (* l l) Om))))) (+ U U*)))
(sqrt (* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om)))) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3)))))))
(sqrt (* (+ t (* 2.0 (/ (* l l) Om))) (+ (* U U) (+ (* U* U*) (* U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om)))) (+ U U*)) (* (+ t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*)))))))
(sqrt (* (+ t (* 2.0 (/ (* l l) Om))) (+ U U*)))
(sqrt (* (* (* 2.0 n) U) (- (pow (- t (* 2.0 (/ (* l l) Om))) 3) (pow (* (* n (pow (/ l Om) 2.0)) (- U U*)) 3))))
(sqrt (+ (* (- t (* 2.0 (/ (* l l) Om))) (- t (* 2.0 (/ (* l l) Om)))) (+ (* (* (* n (pow (/ l Om) 2.0)) (- U U*)) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(sqrt (* (* (* 2.0 n) U) (- (* (- t (* 2.0 (/ (* l l) Om))) (- t (* 2.0 (/ (* l l) Om)))) (* (* (* n (pow (/ l Om) 2.0)) (- U U*)) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(sqrt (+ (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(/ 1 2)
(/ 1 2)
(/ 1 2)
(/ 1 2)
(sqrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(sqrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(+ (+ (+ (log 2.0) (log n)) (log U)) (log (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(+ (+ (log (* 2.0 n)) (log U)) (log (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(+ (log (* (* 2.0 n) U)) (log (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(log (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(exp (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* (* (* 2.0 2.0) 2.0) (* (* n n) n)) (* (* U U) U)) (* (* (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* (* (* 2.0 n) (* 2.0 n)) (* 2.0 n)) (* (* U U) U)) (* (* (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* (* (* 2.0 n) U) (* (* 2.0 n) U)) (* (* 2.0 n) U)) (* (* (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* 2.0 n) U) (- t (* 2.0 (/ (* l l) Om))))
(* (* (* 2.0 n) U) (- (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) t)
(* (* (* 2.0 n) U) (- (- (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) t)
(* (* (* 2.0 n) U) (- (- (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) (- t (* 2.0 (/ (* l l) Om))))
(* (* (* 2.0 n) U) (- (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (- t (* 2.0 (/ (* l l) Om))) (* (* 2.0 n) U))
(* (- (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* 2.0 n) U))
(* t (* (* 2.0 n) U))
(* (- (- (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* 2.0 n) U))
(* t (* (* 2.0 n) U))
(* (- (- (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* 2.0 n) U))
(* (- t (* 2.0 (/ (* l l) Om))) (* (* 2.0 n) U))
(* (- (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* 2.0 n) U))
(* (* (* 2.0 n) U) (* (cbrt (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (cbrt (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(* (* (* 2.0 n) U) (sqrt (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* 2.0 n) U) 1)
(* U (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ (* l l) Om)) 3)) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ (* t t) (+ (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om))) (* t (* 2.0 (/ (* l l) Om))))) (* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3))))))
(* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ (* l l) Om)) 3)) (+ U U*)) (* (+ (* t t) (+ (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om))) (* t (* 2.0 (/ (* l l) Om))))) (* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*))))))
(* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om)))) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3))))))
(* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ (* l l) Om)) (* 2.0 (/ (* l l) Om)))) (+ U U*)) (* (+ t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*))))))
(* (* (* 2.0 n) U) (- (pow (- t (* 2.0 (/ (* l l) Om))) 3) (pow (* (* n (pow (/ l Om) 2.0)) (- U U*)) 3)))
(* (* (* 2.0 n) U) (- (* (- t (* 2.0 (/ (* l l) Om))) (- t (* 2.0 (/ (* l l) Om)))) (* (* (* n (pow (/ l Om) 2.0)) (- U U*)) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* n (pow (/ l Om) 2.0)) (- U U*))
(+ (+ (log n) (* (- (log l) (log Om)) 2.0)) (log (- U U*)))
(+ (+ (log n) (* (log (/ l Om)) 2.0)) (log (- U U*)))
(+ (+ (log n) (* (log (/ l Om)) 2.0)) (log (- U U*)))
(+ (+ (log n) (log (pow (/ l Om) 2.0))) (log (- U U*)))
(+ (log (* n (pow (/ l Om) 2.0))) (log (- U U*)))
(log (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(exp (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(* (* (* (* n n) n) (* (* (pow (/ l Om) 2.0) (pow (/ l Om) 2.0)) (pow (/ l Om) 2.0))) (* (* (- U U*) (- U U*)) (- U U*)))
(* (* (* (* n (pow (/ l Om) 2.0)) (* n (pow (/ l Om) 2.0))) (* n (pow (/ l Om) 2.0))) (* (* (- U U*) (- U U*)) (- U U*)))
(* (cbrt (* (* n (pow (/ l Om) 2.0)) (- U U*))) (cbrt (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(cbrt (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(* (* (* (* n (pow (/ l Om) 2.0)) (- U U*)) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(sqrt (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(sqrt (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(* (* n (pow (/ l Om) 2.0)) U)
(* (* n (pow (/ l Om) 2.0)) (- U*))
(* (* n (pow (/ l Om) 2.0)) U)
(* (* n (pow (/ l Om) 2.0)) (- U*))
(* U (* n (pow (/ l Om) 2.0)))
(* (- U*) (* n (pow (/ l Om) 2.0)))
(* U (* n (pow (/ l Om) 2.0)))
(* (- U*) (* n (pow (/ l Om) 2.0)))
(* (* n (pow (/ l Om) 2.0)) (* (cbrt (- U U*)) (cbrt (- U U*))))
(* (* n (pow (/ l Om) 2.0)) (sqrt (- U U*)))
(* (* n (pow (/ l Om) 2.0)) 1)
(* (* n (pow (/ l Om) 2.0)) (+ (sqrt U) (sqrt U*)))
(* (* n (pow (/ l Om) 2.0)) 1)
(* (pow (/ l Om) 2.0) (- U U*))
(* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3)))
(* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*)))
(- (+ (log l) (log l)) (log Om))
(- (log (* l l)) (log Om))
(log (/ (* l l) Om))
(exp (/ (* l l) Om))
(/ (* (* (* l l) l) (* (* l l) l)) (* (* Om Om) Om))
(/ (* (* (* l l) (* l l)) (* l l)) (* (* Om Om) Om))
(* (cbrt (/ (* l l) Om)) (cbrt (/ (* l l) Om)))
(cbrt (/ (* l l) Om))
(* (* (/ (* l l) Om) (/ (* l l) Om)) (/ (* l l) Om))
(sqrt (/ (* l l) Om))
(sqrt (/ (* l l) Om))
(- (* l l))
(- Om)
(/ l (* (cbrt Om) (cbrt Om)))
(/ l (cbrt Om))
(/ l (sqrt Om))
(/ l (sqrt Om))
(/ l 1)
(/ l Om)
(/ 1 Om)
(/ Om (* l l))
(/ (* l l) (* (cbrt Om) (cbrt Om)))
(/ (* l l) (sqrt Om))
(/ (* l l) 1)
(/ Om l)
0
(+ (* 0.5 (/ (* (sqrt 2.0) U*) (* U (sqrt (* -1 (pow (/ 1 (pow l 2.0)) 1.0)))))) (+ (/ (* (sqrt 2.0) (* U (* (sqrt (* -1 (pow (pow l 2.0) 1.0))) n))) Om) (* 1/2 (/ (* (sqrt 2.0) (* n (* U* (pow l 2)))) (* (sqrt (* -1 (pow (pow l 2.0) 1.0))) Om)))))
(- (+ (* 0.5 (/ (* (sqrt 2.0) U*) (* (sqrt (* -1 (pow (/ (pow -1 2.0) (pow l 2.0)) 1.0))) U))) (+ (* 1/2 (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* (sqrt 2.0) (* n (* U* (pow l 2)))) (* Om (sqrt (* -1 (pow (/ (pow l 2.0) (pow -1 2.0)) 1.0))))))) (/ (* (sqrt 2.0) (* U (* (sqrt (* -1 (pow (/ (pow l 2.0) (pow -1 2.0)) 1.0))) n))) Om))))
0
(- (+ (* 2.0 (/ (* U (* (pow n 2) (* U* (pow l 2)))) (pow Om 2))) (* 2.0 (* t (* U n)))) (* 4.0 (/ (* U (* n (pow l 2))) Om)))
(- (+ (* 2.0 (* t (* U n))) (* 2.0 (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* U (* (pow n 2) (* U* (pow l 2)))) (pow Om 2))))) (* 4.0 (/ (* U (* n (pow l 2))) Om)))
0
(- (* (pow (/ 1 (pow Om 2.0)) 1.0) (* U (* n (pow l 2)))) (/ (* n (* U* (pow l 2))) (pow Om 2)))
(- (* (pow (/ 1 (pow Om 2.0)) 1.0) (* U (* n (pow l 2)))) (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* n (* U* (pow l 2))) (pow Om 2))))
(/ (pow l 2) Om)
(/ (pow l 2) Om)
(/ (pow l 2) Om)
"NEW BATCH"
(log (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(exp (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(* (cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))) (cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))))
(cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(* (* (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(sqrt (* (* 2.0 n) U))
(sqrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3)))))))
(sqrt (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (+ (* U U) (+ (* U* U*) (* U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ U U*)) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*)))))))
(sqrt (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (+ U U*)))
(sqrt (* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3)))))))
(sqrt (* (+ t (* 2.0 (/ l (/ Om l)))) (+ (* U U) (+ (* U* U*) (* U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ U U*)) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*)))))))
(sqrt (* (+ t (* 2.0 (/ l (/ Om l)))) (+ U U*)))
(sqrt (* (* (* 2.0 n) U) (- (pow (- t (* 2.0 (/ l (/ Om l)))) 3) (pow (* (* n (pow (/ l Om) 2.0)) (- U U*)) 3))))
(sqrt (+ (* (- t (* 2.0 (/ l (/ Om l)))) (- t (* 2.0 (/ l (/ Om l))))) (+ (* (* (* n (pow (/ l Om) 2.0)) (- U U*)) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(sqrt (* (* (* 2.0 n) U) (- (* (- t (* 2.0 (/ l (/ Om l)))) (- t (* 2.0 (/ l (/ Om l))))) (* (* (* n (pow (/ l Om) 2.0)) (- U U*)) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(sqrt (+ (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(/ 1 2)
(/ 1 2)
(/ 1 2)
(/ 1 2)
(sqrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(sqrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(+ (+ (+ (log 2.0) (log n)) (log U)) (log (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(+ (+ (log (* 2.0 n)) (log U)) (log (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(+ (log (* (* 2.0 n) U)) (log (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(log (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(exp (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* (* (* 2.0 2.0) 2.0) (* (* n n) n)) (* (* U U) U)) (* (* (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* (* (* 2.0 n) (* 2.0 n)) (* 2.0 n)) (* (* U U) U)) (* (* (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* (* (* 2.0 n) U) (* (* 2.0 n) U)) (* (* 2.0 n) U)) (* (* (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* 2.0 n) U) (- t (* 2.0 (/ l (/ Om l)))))
(* (* (* 2.0 n) U) (- (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) t)
(* (* (* 2.0 n) U) (- (- (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) t)
(* (* (* 2.0 n) U) (- (- (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) (- t (* 2.0 (/ l (/ Om l)))))
(* (* (* 2.0 n) U) (- (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (- t (* 2.0 (/ l (/ Om l)))) (* (* 2.0 n) U))
(* (- (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* 2.0 n) U))
(* t (* (* 2.0 n) U))
(* (- (- (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* 2.0 n) U))
(* t (* (* 2.0 n) U))
(* (- (- (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* 2.0 n) U))
(* (- t (* 2.0 (/ l (/ Om l)))) (* (* 2.0 n) U))
(* (- (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* 2.0 n) U))
(* (* (* 2.0 n) U) (* (cbrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) (cbrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))
(* (* (* 2.0 n) U) (sqrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* (* 2.0 n) U) 1)
(* U (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3))))))
(* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ U U*)) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*))))))
(* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3))))))
(* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ U U*)) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*))))))
(* (* (* 2.0 n) U) (- (pow (- t (* 2.0 (/ l (/ Om l)))) 3) (pow (* (* n (pow (/ l Om) 2.0)) (- U U*)) 3)))
(* (* (* 2.0 n) U) (- (* (- t (* 2.0 (/ l (/ Om l)))) (- t (* 2.0 (/ l (/ Om l))))) (* (* (* n (pow (/ l Om) 2.0)) (- U U*)) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))
(* (* n (pow (/ l Om) 2.0)) (- U U*))
(+ (+ (log n) (* (- (log l) (log Om)) 2.0)) (log (- U U*)))
(+ (+ (log n) (* (log (/ l Om)) 2.0)) (log (- U U*)))
(+ (+ (log n) (* (log (/ l Om)) 2.0)) (log (- U U*)))
(+ (+ (log n) (log (pow (/ l Om) 2.0))) (log (- U U*)))
(+ (log (* n (pow (/ l Om) 2.0))) (log (- U U*)))
(log (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(exp (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(* (* (* (* n n) n) (* (* (pow (/ l Om) 2.0) (pow (/ l Om) 2.0)) (pow (/ l Om) 2.0))) (* (* (- U U*) (- U U*)) (- U U*)))
(* (* (* (* n (pow (/ l Om) 2.0)) (* n (pow (/ l Om) 2.0))) (* n (pow (/ l Om) 2.0))) (* (* (- U U*) (- U U*)) (- U U*)))
(* (cbrt (* (* n (pow (/ l Om) 2.0)) (- U U*))) (cbrt (* (* n (pow (/ l Om) 2.0)) (- U U*))))
(cbrt (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(* (* (* (* n (pow (/ l Om) 2.0)) (- U U*)) (* (* n (pow (/ l Om) 2.0)) (- U U*))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(sqrt (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(sqrt (* (* n (pow (/ l Om) 2.0)) (- U U*)))
(* (* n (pow (/ l Om) 2.0)) U)
(* (* n (pow (/ l Om) 2.0)) (- U*))
(* (* n (pow (/ l Om) 2.0)) U)
(* (* n (pow (/ l Om) 2.0)) (- U*))
(* U (* n (pow (/ l Om) 2.0)))
(* (- U*) (* n (pow (/ l Om) 2.0)))
(* U (* n (pow (/ l Om) 2.0)))
(* (- U*) (* n (pow (/ l Om) 2.0)))
(* (* n (pow (/ l Om) 2.0)) (* (cbrt (- U U*)) (cbrt (- U U*))))
(* (* n (pow (/ l Om) 2.0)) (sqrt (- U U*)))
(* (* n (pow (/ l Om) 2.0)) 1)
(* (* n (pow (/ l Om) 2.0)) (+ (sqrt U) (sqrt U*)))
(* (* n (pow (/ l Om) 2.0)) 1)
(* (pow (/ l Om) 2.0) (- U U*))
(* (* n (pow (/ l Om) 2.0)) (- (pow U 3) (pow U* 3)))
(* (* n (pow (/ l Om) 2.0)) (- (* U U) (* U* U*)))
(+ (log n) (* (- (log l) (log Om)) 2.0))
(+ (log n) (* (log (/ l Om)) 2.0))
(+ (log n) (* (log (/ l Om)) 2.0))
(+ (log n) (log (pow (/ l Om) 2.0)))
(log (* n (pow (/ l Om) 2.0)))
(exp (* n (pow (/ l Om) 2.0)))
(* (* (* n n) n) (* (* (pow (/ l Om) 2.0) (pow (/ l Om) 2.0)) (pow (/ l Om) 2.0)))
(* (cbrt (* n (pow (/ l Om) 2.0))) (cbrt (* n (pow (/ l Om) 2.0))))
(cbrt (* n (pow (/ l Om) 2.0)))
(* (* (* n (pow (/ l Om) 2.0)) (* n (pow (/ l Om) 2.0))) (* n (pow (/ l Om) 2.0)))
(sqrt (* n (pow (/ l Om) 2.0)))
(sqrt (* n (pow (/ l Om) 2.0)))
(* (sqrt n) (pow (sqrt (/ l Om)) 2.0))
(* (sqrt n) (pow (sqrt (/ l Om)) 2.0))
(* (sqrt n) (pow (/ (sqrt l) (sqrt Om)) 2.0))
(* (sqrt n) (pow (/ (sqrt l) (sqrt Om)) 2.0))
(* (sqrt n) (sqrt (pow (/ l Om) 2.0)))
(* (sqrt n) (sqrt (pow (/ l Om) 2.0)))
(* (sqrt n) (pow (/ l Om) (/ 2.0 2)))
(* (sqrt n) (pow (/ l Om) (/ 2.0 2)))
(* n (pow (* (cbrt (/ l Om)) (cbrt (/ l Om))) 2.0))
(* n (pow (sqrt (/ l Om)) 2.0))
(* n (pow (/ (* (cbrt l) (cbrt l)) (* (cbrt Om) (cbrt Om))) 2.0))
(* n (pow (/ (* (cbrt l) (cbrt l)) (sqrt Om)) 2.0))
(* n (pow (/ (* (cbrt l) (cbrt l)) 1) 2.0))
(* n (pow (/ (sqrt l) (* (cbrt Om) (cbrt Om))) 2.0))
(* n (pow (/ (sqrt l) (sqrt Om)) 2.0))
(* n (pow (/ (sqrt l) 1) 2.0))
(* n (pow (/ 1 (* (cbrt Om) (cbrt Om))) 2.0))
(* n (pow (/ 1 (sqrt Om)) 2.0))
(* n (pow (/ 1 1) 2.0))
(* n (pow 1 2.0))
(* n (pow l 2.0))
(* n (* (cbrt (pow (/ l Om) 2.0)) (cbrt (pow (/ l Om) 2.0))))
(* n (sqrt (pow (/ l Om) 2.0)))
(* n 1)
(* n (pow (/ l Om) (/ 2.0 2)))
(* (cbrt n) (pow (/ l Om) 2.0))
(* (sqrt n) (pow (/ l Om) 2.0))
(* n (pow (/ l Om) 2.0))
0
(+ (* 0.5 (/ (* (sqrt 2.0) U*) (* U (sqrt (* -1 (pow (/ 1 (pow l 2.0)) 1.0)))))) (+ (/ (* (sqrt 2.0) (* U (* (sqrt (* -1 (pow (pow l 2.0) 1.0))) n))) Om) (* 1/2 (/ (* (sqrt 2.0) (* n (* U* (pow l 2)))) (* (sqrt (* -1 (pow (pow l 2.0) 1.0))) Om)))))
(- (+ (* 0.5 (/ (* (sqrt 2.0) U*) (* (sqrt (* -1 (pow (/ (pow -1 2.0) (pow l 2.0)) 1.0))) U))) (+ (* 1/2 (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* (sqrt 2.0) (* n (* U* (pow l 2)))) (* Om (sqrt (* -1 (pow (/ (pow l 2.0) (pow -1 2.0)) 1.0))))))) (/ (* (sqrt 2.0) (* U (* (sqrt (* -1 (pow (/ (pow l 2.0) (pow -1 2.0)) 1.0))) n))) Om))))
0
(- (+ (* 2.0 (/ (* U (* (pow n 2) (* U* (pow l 2)))) (pow Om 2))) (* 2.0 (* t (* U n)))) (* 4.0 (/ (* U (* n (pow l 2))) Om)))
(- (+ (* 2.0 (* t (* U n))) (* 2.0 (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* U (* (pow n 2) (* U* (pow l 2)))) (pow Om 2))))) (* 4.0 (/ (* U (* n (pow l 2))) Om)))
0
(- (* (pow (/ 1 (pow Om 2.0)) 1.0) (* U (* n (pow l 2)))) (/ (* n (* U* (pow l 2))) (pow Om 2)))
(- (* (pow (/ 1 (pow Om 2.0)) 1.0) (* U (* n (pow l 2)))) (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* n (* U* (pow l 2))) (pow Om 2))))
0
(* n (pow (/ (pow l 2.0) (pow Om 2.0)) 1.0))
(* n (pow (/ (pow l 2.0) (pow Om 2.0)) 1.0))
"NEW BATCH"
(log (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(exp (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(* (cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))) (cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))))
(cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(* (* (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(sqrt (* (* 2.0 n) U))
(sqrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (pow U 3) (pow U* 3)))))))
(sqrt (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (+ (* U U) (+ (* U* U*) (* U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ U U*)) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (* U U) (* U* U*)))))))
(sqrt (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (+ U U*)))
(sqrt (* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (pow U 3) (pow U* 3)))))))
(sqrt (* (+ t (* 2.0 (/ l (/ Om l)))) (+ (* U U) (+ (* U* U*) (* U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ U U*)) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (* U U) (* U* U*)))))))
(sqrt (* (+ t (* 2.0 (/ l (/ Om l)))) (+ U U*)))
(sqrt (* (* (* 2.0 n) U) (- (pow (- t (* 2.0 (/ l (/ Om l)))) 3) (pow (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)) 3))))
(sqrt (+ (* (- t (* 2.0 (/ l (/ Om l)))) (- t (* 2.0 (/ l (/ Om l))))) (+ (* (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (* (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(sqrt (* (* (* 2.0 n) U) (- (* (- t (* 2.0 (/ l (/ Om l)))) (- t (* 2.0 (/ l (/ Om l))))) (* (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(sqrt (+ (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(/ 1 2)
(/ 1 2)
(/ 1 2)
(/ 1 2)
(sqrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(sqrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(+ (+ (+ (log 2.0) (log n)) (log U)) (log (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(+ (+ (log (* 2.0 n)) (log U)) (log (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(+ (log (* (* 2.0 n) U)) (log (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(log (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(exp (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(* (* (* (* (* 2.0 2.0) 2.0) (* (* n n) n)) (* (* U U) U)) (* (* (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(* (* (* (* (* 2.0 n) (* 2.0 n)) (* 2.0 n)) (* (* U U) U)) (* (* (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(* (* (* (* (* 2.0 n) U) (* (* 2.0 n) U)) (* (* 2.0 n) U)) (* (* (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(* (cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))) (cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(* (* (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))) (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))) (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(* (* (* 2.0 n) U) (- t (* 2.0 (/ l (/ Om l)))))
(* (* (* 2.0 n) U) (- (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(* (* (* 2.0 n) U) t)
(* (* (* 2.0 n) U) (- (- (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(* (* (* 2.0 n) U) t)
(* (* (* 2.0 n) U) (- (- (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(* (* (* 2.0 n) U) (- t (* 2.0 (/ l (/ Om l)))))
(* (* (* 2.0 n) U) (- (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(* (- t (* 2.0 (/ l (/ Om l)))) (* (* 2.0 n) U))
(* (- (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (* (* 2.0 n) U))
(* t (* (* 2.0 n) U))
(* (- (- (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (* (* 2.0 n) U))
(* t (* (* 2.0 n) U))
(* (- (- (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (* (* 2.0 n) U))
(* (- t (* 2.0 (/ l (/ Om l)))) (* (* 2.0 n) U))
(* (- (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (* (* 2.0 n) U))
(* (* (* 2.0 n) U) (* (cbrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))) (cbrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))))
(* (* (* 2.0 n) U) (sqrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(* (* (* 2.0 n) U) 1)
(* U (- (- t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (pow U 3) (pow U* 3))))))
(* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ U U*)) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (* U U) (* U* U*))))))
(* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (pow U 3) (pow U* 3))))))
(* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ U U*)) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (* U U) (* U* U*))))))
(* (* (* 2.0 n) U) (- (pow (- t (* 2.0 (/ l (/ Om l)))) 3) (pow (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)) 3)))
(* (* (* 2.0 n) U) (- (* (- t (* 2.0 (/ l (/ Om l)))) (- t (* 2.0 (/ l (/ Om l))))) (* (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))
(+ (+ (+ (log n) (* (- (log l) (log Om)) (/ 2.0 2))) (* (- (log l) (log Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (* (- (log l) (log Om)) (/ 2.0 2))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (* (- (log l) (log Om)) (/ 2.0 2))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (* (- (log l) (log Om)) (/ 2.0 2))) (log (pow (/ l Om) (/ 2.0 2)))) (log (- U U*)))
(+ (+ (+ (log n) (* (log (/ l Om)) (/ 2.0 2))) (* (- (log l) (log Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (* (log (/ l Om)) (/ 2.0 2))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (* (log (/ l Om)) (/ 2.0 2))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (* (log (/ l Om)) (/ 2.0 2))) (log (pow (/ l Om) (/ 2.0 2)))) (log (- U U*)))
(+ (+ (+ (log n) (* (log (/ l Om)) (/ 2.0 2))) (* (- (log l) (log Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (* (log (/ l Om)) (/ 2.0 2))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (* (log (/ l Om)) (/ 2.0 2))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (* (log (/ l Om)) (/ 2.0 2))) (log (pow (/ l Om) (/ 2.0 2)))) (log (- U U*)))
(+ (+ (+ (log n) (log (pow (/ l Om) (/ 2.0 2)))) (* (- (log l) (log Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (log (pow (/ l Om) (/ 2.0 2)))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (log (pow (/ l Om) (/ 2.0 2)))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (+ (log n) (log (pow (/ l Om) (/ 2.0 2)))) (log (pow (/ l Om) (/ 2.0 2)))) (log (- U U*)))
(+ (+ (log (* n (pow (/ l Om) (/ 2.0 2)))) (* (- (log l) (log Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (log (* n (pow (/ l Om) (/ 2.0 2)))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (log (* n (pow (/ l Om) (/ 2.0 2)))) (* (log (/ l Om)) (/ 2.0 2))) (log (- U U*)))
(+ (+ (log (* n (pow (/ l Om) (/ 2.0 2)))) (log (pow (/ l Om) (/ 2.0 2)))) (log (- U U*)))
(+ (log (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2)))) (log (- U U*)))
(log (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))
(exp (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))
(* (* (* (* (* n n) n) (* (* (pow (/ l Om) (/ 2.0 2)) (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2)))) (* (* (pow (/ l Om) (/ 2.0 2)) (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2)))) (* (* (- U U*) (- U U*)) (- U U*)))
(* (* (* (* (* n (pow (/ l Om) (/ 2.0 2))) (* n (pow (/ l Om) (/ 2.0 2)))) (* n (pow (/ l Om) (/ 2.0 2)))) (* (* (pow (/ l Om) (/ 2.0 2)) (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2)))) (* (* (- U U*) (- U U*)) (- U U*)))
(* (* (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2)))) (* (* (- U U*) (- U U*)) (- U U*)))
(* (cbrt (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (cbrt (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))))
(cbrt (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))
(* (* (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))
(sqrt (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))
(sqrt (* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U U*)))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) U)
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U*))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) U)
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- U*))
(* U (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))))
(* (- U*) (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))))
(* U (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))))
(* (- U*) (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (* (cbrt (- U U*)) (cbrt (- U U*))))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (sqrt (- U U*)))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) 1)
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (+ (sqrt U) (sqrt U*)))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) 1)
(* (pow (/ l Om) (/ 2.0 2)) (- U U*))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (pow U 3) (pow U* 3)))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (- (* U U) (* U* U*)))
(+ (log n) (* (- (log l) (log Om)) (/ 2.0 2)))
(+ (log n) (* (log (/ l Om)) (/ 2.0 2)))
(+ (log n) (* (log (/ l Om)) (/ 2.0 2)))
(+ (log n) (log (pow (/ l Om) (/ 2.0 2))))
(log (* n (pow (/ l Om) (/ 2.0 2))))
(exp (* n (pow (/ l Om) (/ 2.0 2))))
(* (* (* n n) n) (* (* (pow (/ l Om) (/ 2.0 2)) (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))))
(* (cbrt (* n (pow (/ l Om) (/ 2.0 2)))) (cbrt (* n (pow (/ l Om) (/ 2.0 2)))))
(cbrt (* n (pow (/ l Om) (/ 2.0 2))))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (* n (pow (/ l Om) (/ 2.0 2)))) (* n (pow (/ l Om) (/ 2.0 2))))
(sqrt (* n (pow (/ l Om) (/ 2.0 2))))
(sqrt (* n (pow (/ l Om) (/ 2.0 2))))
(* (sqrt n) (pow (sqrt (/ l Om)) (/ 2.0 2)))
(* (sqrt n) (pow (sqrt (/ l Om)) (/ 2.0 2)))
(* (sqrt n) (pow (/ (sqrt l) (sqrt Om)) (/ 2.0 2)))
(* (sqrt n) (pow (/ (sqrt l) (sqrt Om)) (/ 2.0 2)))
(* (sqrt n) (sqrt (pow (/ l Om) (/ 2.0 2))))
(* (sqrt n) (sqrt (pow (/ l Om) (/ 2.0 2))))
(* (sqrt n) (pow (/ l Om) (/ (/ 2.0 2) 2)))
(* (sqrt n) (pow (/ l Om) (/ (/ 2.0 2) 2)))
(* n (pow (* (cbrt (/ l Om)) (cbrt (/ l Om))) (/ 2.0 2)))
(* n (pow (sqrt (/ l Om)) (/ 2.0 2)))
(* n (pow (/ (* (cbrt l) (cbrt l)) (* (cbrt Om) (cbrt Om))) (/ 2.0 2)))
(* n (pow (/ (* (cbrt l) (cbrt l)) (sqrt Om)) (/ 2.0 2)))
(* n (pow (/ (* (cbrt l) (cbrt l)) 1) (/ 2.0 2)))
(* n (pow (/ (sqrt l) (* (cbrt Om) (cbrt Om))) (/ 2.0 2)))
(* n (pow (/ (sqrt l) (sqrt Om)) (/ 2.0 2)))
(* n (pow (/ (sqrt l) 1) (/ 2.0 2)))
(* n (pow (/ 1 (* (cbrt Om) (cbrt Om))) (/ 2.0 2)))
(* n (pow (/ 1 (sqrt Om)) (/ 2.0 2)))
(* n (pow (/ 1 1) (/ 2.0 2)))
(* n (pow 1 (/ 2.0 2)))
(* n (pow l (/ 2.0 2)))
(* n (* (cbrt (pow (/ l Om) (/ 2.0 2))) (cbrt (pow (/ l Om) (/ 2.0 2)))))
(* n (sqrt (pow (/ l Om) (/ 2.0 2))))
(* n 1)
(* n (pow (/ l Om) (/ (/ 2.0 2) 2)))
(* (cbrt n) (pow (/ l Om) (/ 2.0 2)))
(* (sqrt n) (pow (/ l Om) (/ 2.0 2)))
(* n (pow (/ l Om) (/ 2.0 2)))
0
(+ (* 0.5 (/ (* (sqrt 2.0) U*) (* U (sqrt (* -1 (pow (/ 1 (pow l 2.0)) 1.0)))))) (+ (/ (* (sqrt 2.0) (* U (* (sqrt (* -1 (pow (pow l 2.0) 1.0))) n))) Om) (* 1/2 (/ (* (sqrt 2.0) (* n (* U* (pow l 2)))) (* (sqrt (* -1 (pow (pow l 2.0) 1.0))) Om)))))
(- (+ (* 0.5 (/ (* (sqrt 2.0) U*) (* (sqrt (* -1 (pow (/ (pow -1 2.0) (pow l 2.0)) 1.0))) U))) (+ (* 1/2 (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* (sqrt 2.0) (* n (* U* (pow l 2)))) (* Om (sqrt (* -1 (pow (/ (pow l 2.0) (pow -1 2.0)) 1.0))))))) (/ (* (sqrt 2.0) (* U (* (sqrt (* -1 (pow (/ (pow l 2.0) (pow -1 2.0)) 1.0))) n))) Om))))
0
(- (+ (* 2.0 (/ (* U (* (pow n 2) (* U* (pow l 2)))) (pow Om 2))) (* 2.0 (* t (* U n)))) (* 4.0 (/ (* U (* n (pow l 2))) Om)))
(- (+ (* 2.0 (* t (* U n))) (* 2.0 (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* U (* (pow n 2) (* U* (pow l 2)))) (pow Om 2))))) (* 4.0 (/ (* U (* n (pow l 2))) Om)))
0
(- (* (pow (/ 1 (pow Om 2.0)) 1.0) (* U (* n (pow l 2)))) (/ (* n (* U* (pow l 2))) (pow Om 2)))
(- (* (pow (/ 1 (pow Om 2.0)) 1.0) (* U (* n (pow l 2)))) (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* n (* U* (pow l 2))) (pow Om 2))))
(* (* n l) (pow (/ 1 (pow Om 1.0)) 1.0))
(* n (pow (/ (pow l 1.0) (pow Om 1.0)) 1.0))
(* n (pow (/ (pow l 1.0) (pow Om 1.0)) 1.0))
"NEW BATCH"
(log (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(exp (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(* (cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))) (cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))))
(cbrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(* (* (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(sqrt (* (* 2.0 n) U))
(sqrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- (pow U 3) (pow U* 3))))))))
(sqrt (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (+ (* U U) (+ (* U* U*) (* U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ U U*)) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- (* U U) (* U* U*))))))))
(sqrt (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (+ U U*)))
(sqrt (* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- (pow U 3) (pow U* 3))))))))
(sqrt (* (+ t (* 2.0 (/ l (/ Om l)))) (+ (* U U) (+ (* U* U*) (* U U*)))))
(sqrt (* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ U U*)) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- (* U U) (* U* U*))))))))
(sqrt (* (+ t (* 2.0 (/ l (/ Om l)))) (+ U U*)))
(sqrt (* (* (* 2.0 n) U) (- (pow (- t (* 2.0 (/ l (/ Om l)))) 3) (pow (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))) 3))))
(sqrt (+ (* (- t (* 2.0 (/ l (/ Om l)))) (- t (* 2.0 (/ l (/ Om l))))) (+ (* (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))) (* (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(sqrt (* (* (* 2.0 n) U) (- (* (- t (* 2.0 (/ l (/ Om l)))) (- t (* 2.0 (/ l (/ Om l))))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(sqrt (+ (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(/ 1 2)
(/ 1 2)
(/ 1 2)
(/ 1 2)
(sqrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(sqrt (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(+ (+ (+ (log 2.0) (log n)) (log U)) (log (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(+ (+ (log (* 2.0 n)) (log U)) (log (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(+ (log (* (* 2.0 n) U)) (log (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(log (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(exp (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(* (* (* (* (* 2.0 2.0) 2.0) (* (* n n) n)) (* (* U U) U)) (* (* (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(* (* (* (* (* 2.0 n) (* 2.0 n)) (* 2.0 n)) (* (* U U) U)) (* (* (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(* (* (* (* (* 2.0 n) U) (* (* 2.0 n) U)) (* (* 2.0 n) U)) (* (* (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(* (cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))) (cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(cbrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(* (* (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))) (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))) (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(* (* (* 2.0 n) U) (- t (* 2.0 (/ l (/ Om l)))))
(* (* (* 2.0 n) U) (- (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(* (* (* 2.0 n) U) t)
(* (* (* 2.0 n) U) (- (- (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(* (* (* 2.0 n) U) t)
(* (* (* 2.0 n) U) (- (- (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(* (* (* 2.0 n) U) (- t (* 2.0 (/ l (/ Om l)))))
(* (* (* 2.0 n) U) (- (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(* (- t (* 2.0 (/ l (/ Om l)))) (* (* 2.0 n) U))
(* (- (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))) (* (* 2.0 n) U))
(* t (* (* 2.0 n) U))
(* (- (- (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))) (* (* 2.0 n) U))
(* t (* (* 2.0 n) U))
(* (- (- (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))) (* (* 2.0 n) U))
(* (- t (* 2.0 (/ l (/ Om l)))) (* (* 2.0 n) U))
(* (- (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))) (* (* 2.0 n) U))
(* (* (* 2.0 n) U) (* (cbrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))) (cbrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))))
(* (* (* 2.0 n) U) (sqrt (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(* (* (* 2.0 n) U) 1)
(* U (- (- t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))))
(* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- (pow U 3) (pow U* 3)))))))
(* (* (* 2.0 n) U) (- (* (- (pow t 3) (pow (* 2.0 (/ l (/ Om l))) 3)) (+ U U*)) (* (+ (* t t) (+ (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l)))) (* t (* 2.0 (/ l (/ Om l)))))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- (* U U) (* U* U*)))))))
(* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ (* U U) (+ (* U* U*) (* U U*)))) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- (pow U 3) (pow U* 3)))))))
(* (* (* 2.0 n) U) (- (* (- (* t t) (* (* 2.0 (/ l (/ Om l))) (* 2.0 (/ l (/ Om l))))) (+ U U*)) (* (+ t (* 2.0 (/ l (/ Om l)))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- (* U U) (* U* U*)))))))
(* (* (* 2.0 n) U) (- (pow (- t (* 2.0 (/ l (/ Om l)))) 3) (pow (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))) 3)))
(* (* (* 2.0 n) U) (- (* (- t (* 2.0 (/ l (/ Om l)))) (- t (* 2.0 (/ l (/ Om l))))) (* (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))) (* (* n (pow (/ l Om) (/ 2.0 2))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))))
(+ (log n) (* (- (log l) (log Om)) (/ 2.0 2)))
(+ (log n) (* (log (/ l Om)) (/ 2.0 2)))
(+ (log n) (* (log (/ l Om)) (/ 2.0 2)))
(+ (log n) (log (pow (/ l Om) (/ 2.0 2))))
(log (* n (pow (/ l Om) (/ 2.0 2))))
(exp (* n (pow (/ l Om) (/ 2.0 2))))
(* (* (* n n) n) (* (* (pow (/ l Om) (/ 2.0 2)) (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))))
(* (cbrt (* n (pow (/ l Om) (/ 2.0 2)))) (cbrt (* n (pow (/ l Om) (/ 2.0 2)))))
(cbrt (* n (pow (/ l Om) (/ 2.0 2))))
(* (* (* n (pow (/ l Om) (/ 2.0 2))) (* n (pow (/ l Om) (/ 2.0 2)))) (* n (pow (/ l Om) (/ 2.0 2))))
(sqrt (* n (pow (/ l Om) (/ 2.0 2))))
(sqrt (* n (pow (/ l Om) (/ 2.0 2))))
(* (sqrt n) (pow (sqrt (/ l Om)) (/ 2.0 2)))
(* (sqrt n) (pow (sqrt (/ l Om)) (/ 2.0 2)))
(* (sqrt n) (pow (/ (sqrt l) (sqrt Om)) (/ 2.0 2)))
(* (sqrt n) (pow (/ (sqrt l) (sqrt Om)) (/ 2.0 2)))
(* (sqrt n) (sqrt (pow (/ l Om) (/ 2.0 2))))
(* (sqrt n) (sqrt (pow (/ l Om) (/ 2.0 2))))
(* (sqrt n) (pow (/ l Om) (/ (/ 2.0 2) 2)))
(* (sqrt n) (pow (/ l Om) (/ (/ 2.0 2) 2)))
(* n (pow (* (cbrt (/ l Om)) (cbrt (/ l Om))) (/ 2.0 2)))
(* n (pow (sqrt (/ l Om)) (/ 2.0 2)))
(* n (pow (/ (* (cbrt l) (cbrt l)) (* (cbrt Om) (cbrt Om))) (/ 2.0 2)))
(* n (pow (/ (* (cbrt l) (cbrt l)) (sqrt Om)) (/ 2.0 2)))
(* n (pow (/ (* (cbrt l) (cbrt l)) 1) (/ 2.0 2)))
(* n (pow (/ (sqrt l) (* (cbrt Om) (cbrt Om))) (/ 2.0 2)))
(* n (pow (/ (sqrt l) (sqrt Om)) (/ 2.0 2)))
(* n (pow (/ (sqrt l) 1) (/ 2.0 2)))
(* n (pow (/ 1 (* (cbrt Om) (cbrt Om))) (/ 2.0 2)))
(* n (pow (/ 1 (sqrt Om)) (/ 2.0 2)))
(* n (pow (/ 1 1) (/ 2.0 2)))
(* n (pow 1 (/ 2.0 2)))
(* n (pow l (/ 2.0 2)))
(* n (* (cbrt (pow (/ l Om) (/ 2.0 2))) (cbrt (pow (/ l Om) (/ 2.0 2)))))
(* n (sqrt (pow (/ l Om) (/ 2.0 2))))
(* n 1)
(* n (pow (/ l Om) (/ (/ 2.0 2) 2)))
(* (cbrt n) (pow (/ l Om) (/ 2.0 2)))
(* (sqrt n) (pow (/ l Om) (/ 2.0 2)))
(* n (pow (/ l Om) (/ 2.0 2)))
(+ (* (- (log l) (log Om)) (/ 2.0 2)) (log (- U U*)))
(+ (* (log (/ l Om)) (/ 2.0 2)) (log (- U U*)))
(+ (* (log (/ l Om)) (/ 2.0 2)) (log (- U U*)))
(+ (log (pow (/ l Om) (/ 2.0 2))) (log (- U U*)))
(log (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))
(exp (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))
(* (* (* (pow (/ l Om) (/ 2.0 2)) (pow (/ l Om) (/ 2.0 2))) (pow (/ l Om) (/ 2.0 2))) (* (* (- U U*) (- U U*)) (- U U*)))
(* (cbrt (* (pow (/ l Om) (/ 2.0 2)) (- U U*))) (cbrt (* (pow (/ l Om) (/ 2.0 2)) (- U U*))))
(cbrt (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))
(* (* (* (pow (/ l Om) (/ 2.0 2)) (- U U*)) (* (pow (/ l Om) (/ 2.0 2)) (- U U*))) (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))
(sqrt (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))
(sqrt (* (pow (/ l Om) (/ 2.0 2)) (- U U*)))
(* (pow (sqrt (/ l Om)) (/ 2.0 2)) (sqrt (- U U*)))
(* (pow (sqrt (/ l Om)) (/ 2.0 2)) (sqrt (- U U*)))
(* (pow (/ (sqrt l) (sqrt Om)) (/ 2.0 2)) (sqrt (- U U*)))
(* (pow (/ (sqrt l) (sqrt Om)) (/ 2.0 2)) (sqrt (- U U*)))
(* (sqrt (pow (/ l Om) (/ 2.0 2))) (sqrt (- U U*)))
(* (sqrt (pow (/ l Om) (/ 2.0 2))) (sqrt (- U U*)))
(* (pow (/ l Om) (/ (/ 2.0 2) 2)) (sqrt (- U U*)))
(* (pow (/ l Om) (/ (/ 2.0 2) 2)) (sqrt (- U U*)))
(* (pow (/ l Om) (/ 2.0 2)) U)
(* (pow (/ l Om) (/ 2.0 2)) (- U*))
(* (pow (/ l Om) (/ 2.0 2)) U)
(* (pow (/ l Om) (/ 2.0 2)) (- U*))
(* U (pow (/ l Om) (/ 2.0 2)))
(* (- U*) (pow (/ l Om) (/ 2.0 2)))
(* U (pow (/ l Om) (/ 2.0 2)))
(* (- U*) (pow (/ l Om) (/ 2.0 2)))
(* (pow (/ l Om) (/ 2.0 2)) (* (cbrt (- U U*)) (cbrt (- U U*))))
(* (pow (/ l Om) (/ 2.0 2)) (sqrt (- U U*)))
(* (pow (/ l Om) (/ 2.0 2)) 1)
(* (pow (/ l Om) (/ 2.0 2)) (+ (sqrt U) (sqrt U*)))
(* (pow (/ l Om) (/ 2.0 2)) 1)
(* (pow (cbrt (/ l Om)) (/ 2.0 2)) (- U U*))
(* (pow (sqrt (/ l Om)) (/ 2.0 2)) (- U U*))
(* (pow (/ (cbrt l) (cbrt Om)) (/ 2.0 2)) (- U U*))
(* (pow (/ (cbrt l) (sqrt Om)) (/ 2.0 2)) (- U U*))
(* (pow (/ (cbrt l) Om) (/ 2.0 2)) (- U U*))
(* (pow (/ (sqrt l) (cbrt Om)) (/ 2.0 2)) (- U U*))
(* (pow (/ (sqrt l) (sqrt Om)) (/ 2.0 2)) (- U U*))
(* (pow (/ (sqrt l) Om) (/ 2.0 2)) (- U U*))
(* (pow (/ l (cbrt Om)) (/ 2.0 2)) (- U U*))
(* (pow (/ l (sqrt Om)) (/ 2.0 2)) (- U U*))
(* (pow (/ l Om) (/ 2.0 2)) (- U U*))
(* (pow (/ l Om) (/ 2.0 2)) (- U U*))
(* (pow (/ 1 Om) (/ 2.0 2)) (- U U*))
(* (cbrt (pow (/ l Om) (/ 2.0 2))) (- U U*))
(* (sqrt (pow (/ l Om) (/ 2.0 2))) (- U U*))
(* (pow (/ l Om) (/ 2.0 2)) (- U U*))
(* (pow (/ l Om) (/ (/ 2.0 2) 2)) (- U U*))
(* (pow (/ l Om) (/ 2.0 2)) (- (pow U 3) (pow U* 3)))
(* (pow (/ l Om) (/ 2.0 2)) (- (* U U) (* U* U*)))
0
(+ (* 0.5 (/ (* (sqrt 2.0) U*) (* U (sqrt (* -1 (pow (/ 1 (pow l 2.0)) 1.0)))))) (+ (/ (* (sqrt 2.0) (* U (* (sqrt (* -1 (pow (pow l 2.0) 1.0))) n))) Om) (* 1/2 (/ (* (sqrt 2.0) (* n (* U* (pow l 2)))) (* (sqrt (* -1 (pow (pow l 2.0) 1.0))) Om)))))
(- (+ (* 0.5 (/ (* (sqrt 2.0) U*) (* (sqrt (* -1 (pow (/ (pow -1 2.0) (pow l 2.0)) 1.0))) U))) (+ (* 1/2 (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* (sqrt 2.0) (* n (* U* (pow l 2)))) (* Om (sqrt (* -1 (pow (/ (pow l 2.0) (pow -1 2.0)) 1.0))))))) (/ (* (sqrt 2.0) (* U (* (sqrt (* -1 (pow (/ (pow l 2.0) (pow -1 2.0)) 1.0))) n))) Om))))
0
(- (+ (* 2.0 (/ (* U (* (pow n 2) (* U* (pow l 2)))) (pow Om 2))) (* 2.0 (* t (* U n)))) (* 4.0 (/ (* U (* n (pow l 2))) Om)))
(- (+ (* 2.0 (* t (* U n))) (* 2.0 (* (pow (/ 1 (pow -1 2.0)) 1.0) (/ (* U (* (pow n 2) (* U* (pow l 2)))) (pow Om 2))))) (* 4.0 (/ (* U (* n (pow l 2))) Om)))
(* (* n l) (pow (/ 1 (pow Om 1.0)) 1.0))
(* n (pow (/ (pow l 1.0) (pow Om 1.0)) 1.0))
(* n (pow (/ (pow l 1.0) (pow Om 1.0)) 1.0))
(- (* (* U l) (pow (/ 1 (pow Om 1.0)) 1.0)) (* (pow (/ 1 (pow Om 1.0)) 1.0) (* U* l)))
(- (* (* U l) (pow (/ 1 (pow Om 1.0)) 1.0)) (/ (* U* l) Om))
(+ (* (* U l) (pow (/ 1 (pow Om 1.0)) 1.0)) (* (pow (/ 1 (pow -1 1.0)) 1.0) (/ (* U* l) Om)))
"NEW BATCH"
(sin (pow (sqrt (atan2 b b)) (- b a)))
"NEW BATCH"
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(* (log (sqrt (atan2 b b))) (- b a))
(* (log (sqrt (atan2 b b))) (- b a))
(* 1/2 (- b a))
(* 1 (- b a))
(* (/ 1 2) (- b a))
(pow (sqrt (atan2 b b)) b)
(pow (sqrt (atan2 b b)) a)
(pow (sqrt (atan2 b b)) (* (cbrt (- b a)) (cbrt (- b a))))
(pow (sqrt (atan2 b b)) (sqrt (- b a)))
(pow (sqrt (atan2 b b)) 1)
(pow (sqrt (atan2 b b)) (+ (sqrt b) (sqrt a)))
(pow (sqrt (atan2 b b)) 1)
(pow (sqrt (atan2 b b)) b)
(pow (sqrt (atan2 b b)) (- a))
(pow (sqrt (atan2 b b)) b)
(pow (sqrt (atan2 b b)) (- a))
(pow (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b)))) (- b a))
(pow (cbrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b)))) (- b a))
(pow (sqrt (cbrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt 1) (- b a))
(pow (sqrt (atan2 b b)) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow 1 (- b a))
(pow (sqrt (atan2 b b)) (- b a))
(log (pow (sqrt (atan2 b b)) (- b a)))
(exp (pow (sqrt (atan2 b b)) (- b a)))
(* (cbrt (pow (sqrt (atan2 b b)) (- b a))) (cbrt (pow (sqrt (atan2 b b)) (- b a))))
(cbrt (pow (sqrt (atan2 b b)) (- b a)))
(* (* (pow (sqrt (atan2 b b)) (- b a)) (pow (sqrt (atan2 b b)) (- b a))) (pow (sqrt (atan2 b b)) (- b a)))
(/ (- b a) 2)
(sqrt (pow (sqrt (atan2 b b)) (- b a)))
(sqrt (pow (sqrt (atan2 b b)) (- b a)))
(pow (sqrt (atan2 b b)) (/ (- b a) 2))
(pow (sqrt (atan2 b b)) (/ (- b a) 2))
(log (sin (pow (sqrt (atan2 b b)) (- b a))))
(exp (sin (pow (sqrt (atan2 b b)) (- b a))))
(* (cbrt (sin (pow (sqrt (atan2 b b)) (- b a)))) (cbrt (sin (pow (sqrt (atan2 b b)) (- b a)))))
(cbrt (sin (pow (sqrt (atan2 b b)) (- b a))))
(* (* (sin (pow (sqrt (atan2 b b)) (- b a))) (sin (pow (sqrt (atan2 b b)) (- b a)))) (sin (pow (sqrt (atan2 b b)) (- b a))))
(sqrt (sin (pow (sqrt (atan2 b b)) (- b a))))
(sqrt (sin (pow (sqrt (atan2 b b)) (- b a))))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(- (+ (* b (log (sqrt (atan2 b b)))) 1) (* a (log (sqrt (atan2 b b)))))
(pow (sqrt (atan2 b b)) (- b a))
(pow (sqrt (atan2 b b)) (- b a))
(- (+ (* (cos 1) (* b (log (sqrt (atan2 b b))))) (sin 1)) (* a (* (cos 1) (log (sqrt (atan2 b b))))))
(sin (pow (sqrt (atan2 b b)) (- b a)))
(sin (pow (sqrt (atan2 b b)) (- b a)))
"NEW BATCH"
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* 1/2 (- b a))
(* 1 (- b a))
(* (/ 1/2 2) (- b a))
(* (/ 1 2) (- b a))
(* (/ (/ 1 2) 2) (- b a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) a)
(pow (sqrt (sqrt (atan2 b b))) (* (cbrt (- b a)) (cbrt (- b a))))
(pow (sqrt (sqrt (atan2 b b))) (sqrt (- b a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) (+ (sqrt b) (sqrt a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (* (cbrt (sqrt (sqrt (atan2 b b)))) (cbrt (sqrt (sqrt (atan2 b b))))) (- b a))
(pow (cbrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))) (- b a))
(pow (sqrt (cbrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))) (- b a))
(pow (sqrt (sqrt (cbrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt 1)) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt 1) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow 1 (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(exp (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))) (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (* (pow (sqrt (sqrt (atan2 b b))) (- b a)) (pow (sqrt (sqrt (atan2 b b))) (- b a))) (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(/ (- b a) 2)
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* 1/2 (- b a))
(* 1 (- b a))
(* (/ 1/2 2) (- b a))
(* (/ 1 2) (- b a))
(* (/ (/ 1 2) 2) (- b a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) a)
(pow (sqrt (sqrt (atan2 b b))) (* (cbrt (- b a)) (cbrt (- b a))))
(pow (sqrt (sqrt (atan2 b b))) (sqrt (- b a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) (+ (sqrt b) (sqrt a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (* (cbrt (sqrt (sqrt (atan2 b b)))) (cbrt (sqrt (sqrt (atan2 b b))))) (- b a))
(pow (cbrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))) (- b a))
(pow (sqrt (cbrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))) (- b a))
(pow (sqrt (sqrt (cbrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt 1)) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt 1) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow 1 (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(exp (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))) (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (* (pow (sqrt (sqrt (atan2 b b))) (- b a)) (pow (sqrt (sqrt (atan2 b b))) (- b a))) (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(/ (- b a) 2)
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(- (+ (* (log (pow (atan2 b b) 1/4)) b) 1) (* a (log (pow (atan2 b b) 1/4))))
(pow (pow (atan2 b b) 1/4) (- b a))
(pow (pow (atan2 b b) 1/4) (- b a))
(- (+ (* (log (pow (atan2 b b) 1/4)) b) 1) (* a (log (pow (atan2 b b) 1/4))))
(pow (pow (atan2 b b) 1/4) (- b a))
(pow (pow (atan2 b b) 1/4) (- b a))
"NEW BATCH"
(log (pow (sqrt (sqrt (atan2 b b))) b))
(log (pow (sqrt (sqrt (atan2 b b))) (- a)))
(log (pow (sqrt (sqrt (atan2 b b))) b))
(log (pow (sqrt (sqrt (atan2 b b))) (- a)))
(log (pow (* (cbrt (sqrt (sqrt (atan2 b b)))) (cbrt (sqrt (sqrt (atan2 b b))))) (- b a)))
(log (pow (cbrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))) (- b a)))
(log (pow (sqrt (cbrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))) (- b a)))
(log (pow (sqrt (sqrt (cbrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt 1)) (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt 1) (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow 1 (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (* (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))) (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))))
(log (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log (sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log (sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log 1)
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2)))
(log (pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2)))
(log (pow (sqrt (sqrt (atan2 b b))) b))
(log (pow (sqrt (sqrt (atan2 b b))) a))
(log (sqrt (sqrt (atan2 b b))))
(log (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(exp (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(* (cbrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a)))) (cbrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a)))))
(cbrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(* (* (log (pow (sqrt (sqrt (atan2 b b))) (- b a))) (log (pow (sqrt (sqrt (atan2 b b))) (- b a)))) (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(sqrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(sqrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* 1/2 (- b a))
(* 1 (- b a))
(* (/ 1/2 2) (- b a))
(* (/ 1 2) (- b a))
(* (/ (/ 1 2) 2) (- b a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) a)
(pow (sqrt (sqrt (atan2 b b))) (* (cbrt (- b a)) (cbrt (- b a))))
(pow (sqrt (sqrt (atan2 b b))) (sqrt (- b a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) (+ (sqrt b) (sqrt a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (* (cbrt (sqrt (sqrt (atan2 b b)))) (cbrt (sqrt (sqrt (atan2 b b))))) (- b a))
(pow (cbrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))) (- b a))
(pow (sqrt (cbrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))) (- b a))
(pow (sqrt (sqrt (cbrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt 1)) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt 1) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow 1 (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(exp (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))) (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (* (pow (sqrt (sqrt (atan2 b b))) (- b a)) (pow (sqrt (sqrt (atan2 b b))) (- b a))) (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(/ (- b a) 2)
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(- (* (log (pow (atan2 b b) 1/4)) b) (* a (log (pow (atan2 b b) 1/4))))
(log (pow (pow (atan2 b b) 1/4) (- b a)))
(* (log (pow (atan2 b b) 1/4)) b)
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(- (+ (* (log (pow (atan2 b b) 1/4)) b) 1) (* a (log (pow (atan2 b b) 1/4))))
(pow (pow (atan2 b b) 1/4) (- b a))
(pow (pow (atan2 b b) 1/4) (- b a))
"NEW BATCH"
(fmod (sinh c) (- c (pow -2.9807307601812193e+165 2.0)))
"NEW BATCH"
(- (exp c) (exp (- c)))
(log (sinh c))
(exp (sinh c))
(* (cbrt (sinh c)) (cbrt (sinh c)))
(cbrt (sinh c))
(* (* (sinh c) (sinh c)) (sinh c))
(sqrt (sinh c))
(sqrt (sinh c))
(+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
(* 1/2 (- (exp c) (exp (- c))))
(* 1/2 (- (exp c) (exp (* -1 c))))
"NEW BATCH"
(+ (log 1/6) (* (log c) 3))
(+ (log 1/6) (* (log c) 3))
(+ (log 1/6) (log (pow c 3)))
(log (* 1/6 (pow c 3)))
(exp (* 1/6 (pow c 3)))
(* (* (* 1/6 1/6) 1/6) (* (* (pow c 3) (pow c 3)) (pow c 3)))
(* (cbrt (* 1/6 (pow c 3))) (cbrt (* 1/6 (pow c 3))))
(cbrt (* 1/6 (pow c 3)))
(* (* (* 1/6 (pow c 3)) (* 1/6 (pow c 3))) (* 1/6 (pow c 3)))
(sqrt (* 1/6 (pow c 3)))
(sqrt (* 1/6 (pow c 3)))
(* (sqrt 1/6) (pow (sqrt c) 3))
(* (sqrt 1/6) (pow (sqrt c) 3))
(* (sqrt 1/6) (pow (sqrt c) 3))
(* (sqrt 1/6) (pow (sqrt c) 3))
(* (sqrt 1/6) (sqrt (pow c 3)))
(* (sqrt 1/6) (sqrt (pow c 3)))
(* (sqrt 1/6) (pow c (/ 3 2)))
(* (sqrt 1/6) (pow c (/ 3 2)))
(* 1/6 (pow (* (cbrt c) (cbrt c)) 3))
(* 1/6 (pow (sqrt c) 3))
(* 1/6 (pow 1 3))
(* 1/6 (* c c))
(* 1/6 (* (cbrt (pow c 3)) (cbrt (pow c 3))))
(* 1/6 (pow (* (cbrt c) (cbrt c)) 3))
(* 1/6 (pow (sqrt c) 3))
(* 1/6 (pow 1 3))
(* 1/6 c)
(* 1/6 (sqrt (pow c 3)))
(* 1/6 1)
(* 1/6 (pow c (/ 3 2)))
(* (cbrt 1/6) (pow c 3))
(* (sqrt 1/6) (pow c 3))
(* 1/6 (pow c 3))
(+ (log 1/120) (* (log c) 5))
(+ (log 1/120) (* (log c) 5))
(+ (log 1/120) (log (pow c 5)))
(log (* 1/120 (pow c 5)))
(exp (* 1/120 (pow c 5)))
(* (* (* 1/120 1/120) 1/120) (* (* (pow c 5) (pow c 5)) (pow c 5)))
(* (cbrt (* 1/120 (pow c 5))) (cbrt (* 1/120 (pow c 5))))
(cbrt (* 1/120 (pow c 5)))
(* (* (* 1/120 (pow c 5)) (* 1/120 (pow c 5))) (* 1/120 (pow c 5)))
(sqrt (* 1/120 (pow c 5)))
(sqrt (* 1/120 (pow c 5)))
(* (sqrt 1/120) (pow (sqrt c) 5))
(* (sqrt 1/120) (pow (sqrt c) 5))
(* (sqrt 1/120) (sqrt (pow c 5)))
(* (sqrt 1/120) (sqrt (pow c 5)))
(* (sqrt 1/120) (pow c (/ 5 2)))
(* (sqrt 1/120) (pow c (/ 5 2)))
(* 1/120 (pow (* (cbrt c) (cbrt c)) 5))
(* 1/120 (pow (sqrt c) 5))
(* 1/120 (pow 1 5))
(* 1/120 (* (cbrt (pow c 5)) (cbrt (pow c 5))))
(* 1/120 (sqrt (pow c 5)))
(* 1/120 1)
(* 1/120 (pow c (/ 5 2)))
(* (cbrt 1/120) (pow c 5))
(* (sqrt 1/120) (pow c 5))
(* 1/120 (pow c 5))
(* (exp (* 1/6 (pow c 3))) (* (exp (* 1/120 (pow c 5))) (exp c)))
(* (exp (* 1/6 (pow c 3))) (exp (+ (* 1/120 (pow c 5)) c)))
(log (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(exp (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(* (cbrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))) (cbrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))))
(cbrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(* (* (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)) (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))) (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(sqrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(sqrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(+ (pow (* 1/6 (pow c 3)) 3) (pow (+ (* 1/120 (pow c 5)) c) 3))
(+ (* (* 1/6 (pow c 3)) (* 1/6 (pow c 3))) (- (* (+ (* 1/120 (pow c 5)) c) (+ (* 1/120 (pow c 5)) c)) (* (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))))
(- (* (* 1/6 (pow c 3)) (* 1/6 (pow c 3))) (* (+ (* 1/120 (pow c 5)) c) (+ (* 1/120 (pow c 5)) c)))
(- (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
(+ (* 1/6 (pow c 3)) (* 1/120 (pow c 5)))
(* 1/6 (pow c 3))
(* 1/6 (pow c 3))
(* 1/6 (pow c 3))
(* 1/120 (pow c 5))
(* 1/120 (pow c 5))
(* 1/120 (pow c 5))
(+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
(+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
(+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
"NEW BATCH"
(acos (pow (fmod (cosh a) (* a a)) (log1p a)))
"NEW BATCH"
(log (fmod (cosh a) (* a a)))
(exp (fmod (cosh a) (* a a)))
(* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))
(cbrt (fmod (cosh a) (* a a)))
(* (* (fmod (cosh a) (* a a)) (fmod (cosh a) (* a a))) (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(/ (PI) 2)
(asin (pow (fmod (cosh a) (* a a)) (log1p a)))
(log (acos (pow (fmod (cosh a) (* a a)) (log1p a))))
(exp (acos (pow (fmod (cosh a) (* a a)) (log1p a))))
(* (cbrt (acos (pow (fmod (cosh a) (* a a)) (log1p a)))) (cbrt (acos (pow (fmod (cosh a) (* a a)) (log1p a)))))
(cbrt (acos (pow (fmod (cosh a) (* a a)) (log1p a))))
(* (* (acos (pow (fmod (cosh a) (* a a)) (log1p a))) (acos (pow (fmod (cosh a) (* a a)) (log1p a)))) (acos (pow (fmod (cosh a) (* a a)) (log1p a))))
(sqrt (acos (pow (fmod (cosh a) (* a a)) (log1p a))))
(sqrt (acos (pow (fmod (cosh a) (* a a)) (log1p a))))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(acos (pow (fmod (cosh a) (pow a 2)) (log1p a)))
(acos (pow (fmod (cosh a) (pow a 2)) (log1p a)))
(acos (pow (fmod (cosh a) (pow a 2)) (log1p a)))
"NEW BATCH"
(log (fmod (cosh a) (* a a)))
(exp (fmod (cosh a) (* a a)))
(* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))
(cbrt (fmod (cosh a) (* a a)))
(* (* (fmod (cosh a) (* a a)) (fmod (cosh a) (* a a))) (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(log (* (cbrt (exp (fmod (cosh a) (* a a)))) (cbrt (exp (fmod (cosh a) (* a a))))))
(log (cbrt (exp (fmod (cosh a) (* a a)))))
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log 1)
(log (exp (fmod (cosh a) (* a a))))
(log (exp (fmod (cosh a) (* a a))))
(log (exp (* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))))
(log (exp (sqrt (fmod (cosh a) (* a a)))))
(log (exp 1))
(log (log (exp (fmod (cosh a) (* a a)))))
(exp (log (exp (fmod (cosh a) (* a a)))))
(* (cbrt (log (exp (fmod (cosh a) (* a a))))) (cbrt (log (exp (fmod (cosh a) (* a a))))))
(cbrt (log (exp (fmod (cosh a) (* a a)))))
(* (* (log (exp (fmod (cosh a) (* a a)))) (log (exp (fmod (cosh a) (* a a))))) (log (exp (fmod (cosh a) (* a a)))))
(sqrt (log (exp (fmod (cosh a) (* a a)))))
(sqrt (log (exp (fmod (cosh a) (* a a)))))
(/ (PI) 2)
(asin (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a)))
(log (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a))))
(exp (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a))))
(* (cbrt (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a)))) (cbrt (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a)))))
(cbrt (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a))))
(* (* (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a))) (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a)))) (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a))))
(sqrt (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a))))
(sqrt (acos (pow (log (exp (fmod (cosh a) (* a a)))) (log1p a))))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(acos (pow (fmod (cosh a) (pow a 2)) (log1p a)))
(acos (pow (fmod (cosh a) (pow a 2)) (log1p a)))
(acos (pow (fmod (cosh a) (pow a 2)) (log1p a)))
"NEW BATCH"
(log (fmod (cosh a) (* a a)))
(exp (fmod (cosh a) (* a a)))
(* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))
(cbrt (fmod (cosh a) (* a a)))
(* (* (fmod (cosh a) (* a a)) (fmod (cosh a) (* a a))) (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(log (fmod (cosh a) (* a a)))
(exp (fmod (cosh a) (* a a)))
(* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))
(cbrt (fmod (cosh a) (* a a)))
(* (* (fmod (cosh a) (* a a)) (fmod (cosh a) (* a a))) (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(log (* (cbrt (sqrt (exp (fmod (cosh a) (* a a))))) (cbrt (sqrt (exp (fmod (cosh a) (* a a)))))))
(log (cbrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt (* (cbrt (exp (fmod (cosh a) (* a a)))) (cbrt (exp (fmod (cosh a) (* a a)))))))
(log (sqrt (cbrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt 1))
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log (sqrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log 1)
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log (exp (fmod (cosh a) (* a a))))
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log (exp (fmod (cosh a) (* a a))))
(log (exp (* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))))
(log (exp (sqrt (fmod (cosh a) (* a a)))))
(log (exp 1))
(log (log (sqrt (exp (fmod (cosh a) (* a a))))))
(exp (log (sqrt (exp (fmod (cosh a) (* a a))))))
(* (cbrt (log (sqrt (exp (fmod (cosh a) (* a a)))))) (cbrt (log (sqrt (exp (fmod (cosh a) (* a a)))))))
(cbrt (log (sqrt (exp (fmod (cosh a) (* a a))))))
(* (* (log (sqrt (exp (fmod (cosh a) (* a a))))) (log (sqrt (exp (fmod (cosh a) (* a a)))))) (log (sqrt (exp (fmod (cosh a) (* a a))))))
(sqrt (log (sqrt (exp (fmod (cosh a) (* a a))))))
(sqrt (log (sqrt (exp (fmod (cosh a) (* a a))))))
(log (* (cbrt (sqrt (exp (fmod (cosh a) (* a a))))) (cbrt (sqrt (exp (fmod (cosh a) (* a a)))))))
(log (cbrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt (* (cbrt (exp (fmod (cosh a) (* a a)))) (cbrt (exp (fmod (cosh a) (* a a)))))))
(log (sqrt (cbrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt 1))
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log (sqrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log (sqrt (sqrt (exp (fmod (cosh a) (* a a))))))
(log 1)
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log (exp (fmod (cosh a) (* a a))))
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log (exp (fmod (cosh a) (* a a))))
(log (exp (* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))))
(log (exp (sqrt (fmod (cosh a) (* a a)))))
(log (exp 1))
(log (log (sqrt (exp (fmod (cosh a) (* a a))))))
(exp (log (sqrt (exp (fmod (cosh a) (* a a))))))
(* (cbrt (log (sqrt (exp (fmod (cosh a) (* a a)))))) (cbrt (log (sqrt (exp (fmod (cosh a) (* a a)))))))
(cbrt (log (sqrt (exp (fmod (cosh a) (* a a))))))
(* (* (log (sqrt (exp (fmod (cosh a) (* a a))))) (log (sqrt (exp (fmod (cosh a) (* a a)))))) (log (sqrt (exp (fmod (cosh a) (* a a))))))
(sqrt (log (sqrt (exp (fmod (cosh a) (* a a))))))
(sqrt (log (sqrt (exp (fmod (cosh a) (* a a))))))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(log (sqrt (exp (fmod (cosh a) (pow a 2)))))
(log (sqrt (exp (fmod (cosh a) (pow a 2)))))
(log (sqrt (exp (fmod (cosh a) (pow a 2)))))
(log (sqrt (exp (fmod (cosh a) (pow a 2)))))
(log (sqrt (exp (fmod (cosh a) (pow a 2)))))
(log (sqrt (exp (fmod (cosh a) (pow a 2)))))
"NEW BATCH"
(log (fmod (cosh a) (* a a)))
(exp (fmod (cosh a) (* a a)))
(* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))
(cbrt (fmod (cosh a) (* a a)))
(* (* (fmod (cosh a) (* a a)) (fmod (cosh a) (* a a))) (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(log (fmod (cosh a) (* a a)))
(exp (fmod (cosh a) (* a a)))
(* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))
(cbrt (fmod (cosh a) (* a a)))
(* (* (fmod (cosh a) (* a a)) (fmod (cosh a) (* a a))) (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(log (fmod (cosh a) (* a a)))
(exp (fmod (cosh a) (* a a)))
(* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))
(cbrt (fmod (cosh a) (* a a)))
(* (* (fmod (cosh a) (* a a)) (fmod (cosh a) (* a a))) (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(sqrt (fmod (cosh a) (* a a)))
(log (* (cbrt (exp (fmod (cosh a) (* a a)))) (cbrt (exp (fmod (cosh a) (* a a))))))
(log (cbrt (exp (fmod (cosh a) (* a a)))))
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log (sqrt (exp (fmod (cosh a) (* a a)))))
(log 1)
(log (exp (fmod (cosh a) (* a a))))
(log (exp (fmod (cosh a) (* a a))))
(log (exp (* (cbrt (fmod (cosh a) (* a a))) (cbrt (fmod (cosh a) (* a a))))))
(log (exp (sqrt (fmod (cosh a) (* a a)))))
(log (exp 1))
(log (log (exp (fmod (cosh a) (* a a)))))
(exp (log (exp (fmod (cosh a) (* a a)))))
(* (cbrt (log (exp (fmod (cosh a) (* a a))))) (cbrt (log (exp (fmod (cosh a) (* a a))))))
(cbrt (log (exp (fmod (cosh a) (* a a)))))
(* (* (log (exp (fmod (cosh a) (* a a)))) (log (exp (fmod (cosh a) (* a a))))) (log (exp (fmod (cosh a) (* a a)))))
(sqrt (log (exp (fmod (cosh a) (* a a)))))
(sqrt (log (exp (fmod (cosh a) (* a a)))))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
(fmod (cosh a) (pow a 2))
"NEW BATCH"
(fabs (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
"NEW BATCH"
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (sin (expm1 a)))
(exp (sin (expm1 a)))
(* (cbrt (sin (expm1 a))) (cbrt (sin (expm1 a))))
(cbrt (sin (expm1 a)))
(* (* (sin (expm1 a)) (sin (expm1 a))) (sin (expm1 a)))
(sqrt (sin (expm1 a)))
(sqrt (sin (expm1 a)))
(log (expm1 (sin (expm1 a))))
(exp (expm1 (sin (expm1 a))))
(* (cbrt (expm1 (sin (expm1 a)))) (cbrt (expm1 (sin (expm1 a)))))
(cbrt (expm1 (sin (expm1 a))))
(* (* (expm1 (sin (expm1 a))) (expm1 (sin (expm1 a)))) (expm1 (sin (expm1 a))))
(sqrt (expm1 (sin (expm1 a))))
(sqrt (expm1 (sin (expm1 a))))
(log (atan2 (expm1 (sin (expm1 a))) (atan a)))
(exp (atan2 (expm1 (sin (expm1 a))) (atan a)))
(* (cbrt (atan2 (expm1 (sin (expm1 a))) (atan a))) (cbrt (atan2 (expm1 (sin (expm1 a))) (atan a))))
(cbrt (atan2 (expm1 (sin (expm1 a))) (atan a)))
(* (* (atan2 (expm1 (sin (expm1 a))) (atan a)) (atan2 (expm1 (sin (expm1 a))) (atan a))) (atan2 (expm1 (sin (expm1 a))) (atan a)))
(sqrt (atan2 (expm1 (sin (expm1 a))) (atan a)))
(sqrt (atan2 (expm1 (sin (expm1 a))) (atan a)))
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(sin (expm1 a))
(sin (expm1 a))
(sin (expm1 a))
(expm1 (sin (expm1 a)))
(expm1 (sin (expm1 a)))
(expm1 (sin (expm1 a)))
(atan2 (expm1 (sin (expm1 a))) (atan a))
(atan2 (expm1 (sin (expm1 a))) (atan a))
(atan2 (expm1 (sin (expm1 a))) (atan a))
"NEW BATCH"
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (sin (expm1 a)))
(exp (sin (expm1 a)))
(* (cbrt (sin (expm1 a))) (cbrt (sin (expm1 a))))
(cbrt (sin (expm1 a)))
(* (* (sin (expm1 a)) (sin (expm1 a))) (sin (expm1 a)))
(sqrt (sin (expm1 a)))
(sqrt (sin (expm1 a)))
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(sin (expm1 a))
(sin (expm1 a))
(sin (expm1 a))
"NEW BATCH"
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
"NEW BATCH"
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(log (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(exp (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)))
(cbrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(* (* (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)) (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(sqrt (fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a))
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
(fmod (atan2 (expm1 (sin (expm1 a))) (atan a)) a)
"NEW BATCH"
(fmod (cosh c) (log1p a))
"NEW BATCH"
(log (fmod (cosh c) (log1p a)))
(exp (fmod (cosh c) (log1p a)))
(* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))
(cbrt (fmod (cosh c) (log1p a)))
(* (* (fmod (cosh c) (log1p a)) (fmod (cosh c) (log1p a))) (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
"NEW BATCH"
(log (fmod (cosh c) (log1p a)))
(exp (fmod (cosh c) (log1p a)))
(* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))
(cbrt (fmod (cosh c) (log1p a)))
(* (* (fmod (cosh c) (log1p a)) (fmod (cosh c) (log1p a))) (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(exp 1)
(exp (* (cbrt (log (fmod (cosh c) (log1p a)))) (cbrt (log (fmod (cosh c) (log1p a))))))
(exp (sqrt (log (fmod (cosh c) (log1p a)))))
(exp 1)
(exp (log (* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))))
(exp (log (cbrt (fmod (cosh c) (log1p a)))))
(exp (log (sqrt (fmod (cosh c) (log1p a)))))
(exp (log (sqrt (fmod (cosh c) (log1p a)))))
(exp (log 1))
(exp (log (fmod (cosh c) (log1p a))))
(log (exp (log (fmod (cosh c) (log1p a)))))
(exp (exp (log (fmod (cosh c) (log1p a)))))
(* (cbrt (exp (log (fmod (cosh c) (log1p a))))) (cbrt (exp (log (fmod (cosh c) (log1p a))))))
(cbrt (exp (log (fmod (cosh c) (log1p a)))))
(* (* (exp (log (fmod (cosh c) (log1p a)))) (exp (log (fmod (cosh c) (log1p a))))) (exp (log (fmod (cosh c) (log1p a)))))
(sqrt (exp (log (fmod (cosh c) (log1p a)))))
(sqrt (exp (log (fmod (cosh c) (log1p a)))))
(log (* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a)))))
(log (cbrt (fmod (cosh c) (log1p a))))
(log (sqrt (fmod (cosh c) (log1p a))))
(log (sqrt (fmod (cosh c) (log1p a))))
(log 1)
(log (fmod (cosh c) (log1p a)))
(log (fmod (cosh c) (log1p a)))
(log (log (fmod (cosh c) (log1p a))))
(exp (log (fmod (cosh c) (log1p a))))
(* (cbrt (log (fmod (cosh c) (log1p a)))) (cbrt (log (fmod (cosh c) (log1p a)))))
(cbrt (log (fmod (cosh c) (log1p a))))
(* (* (log (fmod (cosh c) (log1p a))) (log (fmod (cosh c) (log1p a)))) (log (fmod (cosh c) (log1p a))))
(sqrt (log (fmod (cosh c) (log1p a))))
(sqrt (log (fmod (cosh c) (log1p a))))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(log (fmod (cosh c) (log1p a)))
(log (fmod (cosh c) (log1p a)))
(log (fmod (cosh c) (log1p a)))
"NEW BATCH"
(log (fmod (cosh c) (log1p a)))
(exp (fmod (cosh c) (log1p a)))
(* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))
(cbrt (fmod (cosh c) (log1p a)))
(* (* (fmod (cosh c) (log1p a)) (fmod (cosh c) (log1p a))) (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(log (fmod (cosh c) (log1p a)))
(exp (fmod (cosh c) (log1p a)))
(* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))
(cbrt (fmod (cosh c) (log1p a)))
(* (* (fmod (cosh c) (log1p a)) (fmod (cosh c) (log1p a))) (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(+ 1/2 1/2)
(+ 1/2 (/ 1 2))
(+ 1 1)
(+ (/ 1 2) 1/2)
(+ (/ 1 2) (/ 1 2))
(* (fmod (cosh c) (log1p a)) (fmod (cosh c) (log1p a)))
(* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a))))
(* (fmod (cosh c) (log1p a)) (fmod (cosh c) (log1p a)))
(+ 1 1)
(+ (log (sqrt (fmod (cosh c) (log1p a)))) (log (sqrt (fmod (cosh c) (log1p a)))))
(log (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))))
(exp (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))))
(* (* (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))) (sqrt (fmod (cosh c) (log1p a)))) (* (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))) (sqrt (fmod (cosh c) (log1p a)))))
(* (cbrt (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a))))) (cbrt (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a))))))
(cbrt (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))))
(* (* (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))) (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a))))) (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))))
(* (fmod (cosh c) (log1p a)) (fmod (cosh c) (log1p a)))
(sqrt (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))))
(sqrt (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))))
(* (* (cbrt (sqrt (fmod (cosh c) (log1p a)))) (cbrt (sqrt (fmod (cosh c) (log1p a))))) (* (cbrt (sqrt (fmod (cosh c) (log1p a)))) (cbrt (sqrt (fmod (cosh c) (log1p a))))))
(* (cbrt (sqrt (fmod (cosh c) (log1p a)))) (cbrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))) (sqrt (* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))))
(* (sqrt (cbrt (fmod (cosh c) (log1p a)))) (sqrt (cbrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt 1) (sqrt 1))
(* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* 1 1)
(* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* 2 1/2)
(* 2 1)
(* 2 (/ 1 2))
(* (sqrt (fmod (cosh c) (log1p a))) (* (cbrt (sqrt (fmod (cosh c) (log1p a)))) (cbrt (sqrt (fmod (cosh c) (log1p a))))))
(* (sqrt (fmod (cosh c) (log1p a))) (sqrt (* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))))
(* (sqrt (fmod (cosh c) (log1p a))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (fmod (cosh c) (log1p a))) (sqrt 1))
(* (sqrt (fmod (cosh c) (log1p a))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (fmod (cosh c) (log1p a))) 1)
(* (cbrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (fmod (cosh c) (log1p a))))
(* (sqrt (cbrt (fmod (cosh c) (log1p a)))) (sqrt (fmod (cosh c) (log1p a))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (fmod (cosh c) (log1p a))))
(* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (fmod (cosh c) (log1p a))))
(* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a))))
(log (sqrt (fmod (cosh c) (log1p a))))
(exp (sqrt (fmod (cosh c) (log1p a))))
(* (cbrt (sqrt (fmod (cosh c) (log1p a)))) (cbrt (sqrt (fmod (cosh c) (log1p a)))))
(cbrt (sqrt (fmod (cosh c) (log1p a))))
(* (* (sqrt (fmod (cosh c) (log1p a))) (sqrt (fmod (cosh c) (log1p a)))) (sqrt (fmod (cosh c) (log1p a))))
(sqrt (* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a)))))
(sqrt (cbrt (fmod (cosh c) (log1p a))))
(sqrt (sqrt (fmod (cosh c) (log1p a))))
(sqrt (sqrt (fmod (cosh c) (log1p a))))
(sqrt 1)
(sqrt (fmod (cosh c) (log1p a)))
(/ 1 2)
(sqrt (sqrt (fmod (cosh c) (log1p a))))
(sqrt (sqrt (fmod (cosh c) (log1p a))))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(sqrt (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
"NEW BATCH"
(log (fmod (cosh c) (log1p a)))
(exp (fmod (cosh c) (log1p a)))
(* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))
(cbrt (fmod (cosh c) (log1p a)))
(* (* (fmod (cosh c) (log1p a)) (fmod (cosh c) (log1p a))) (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(log (fmod (cosh c) (log1p a)))
(exp (fmod (cosh c) (log1p a)))
(* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a))))
(cbrt (fmod (cosh c) (log1p a)))
(* (* (fmod (cosh c) (log1p a)) (fmod (cosh c) (log1p a))) (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(sqrt (fmod (cosh c) (log1p a)))
(* (log (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(* (log (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(* 1/2 3)
(* 1 3)
(* (/ 1/2 2) 3)
(* (/ 1 2) 3)
(* (/ (/ 1 2) 2) 3)
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (* (cbrt 3) (cbrt 3)))
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt 3))
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 1)
(pow (* (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a)))))) 3)
(pow (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (* (cbrt (sqrt (fmod (cosh c) (log1p a)))) (cbrt (sqrt (fmod (cosh c) (log1p a)))))) 3)
(pow (sqrt (cbrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a)))))) 3)
(pow (sqrt (sqrt (cbrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt 1)) 3)
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt 1) 3)
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow 1 3)
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(log (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3))
(exp (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3))
(* (cbrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (cbrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)))
(cbrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3))
(* (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3))
(pow (* (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a)))))) 3)
(pow (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (* (cbrt (sqrt (fmod (cosh c) (log1p a)))) (cbrt (sqrt (fmod (cosh c) (log1p a)))))) 3)
(pow (sqrt (cbrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a)))))) 3)
(pow (sqrt (sqrt (cbrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt 1)) 3)
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt 1) 3)
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3)
(pow 1 3)
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(/ 3 2)
(sqrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3))
(sqrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3))
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (/ 3 2))
(pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (/ 3 2))
(+ 3 1)
(+ 3 1)
(+ (* (log (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (log (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(+ (* (log (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (log (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(+ (log (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (log (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(log (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(exp (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (* (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (* (* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a))))) (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (cbrt (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))) (cbrt (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))))
(cbrt (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (* (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a))))) (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))) (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(sqrt (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(sqrt (* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (sqrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (sqrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (sqrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (sqrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (sqrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (sqrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (/ 3 2)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (/ 3 2)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (/ 3 2)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (/ 3 2)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (/ 3 2)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (/ 3 2)) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (* (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a)))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (* (cbrt (sqrt (fmod (cosh c) (log1p a)))) (cbrt (sqrt (fmod (cosh c) (log1p a)))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (* (cbrt (fmod (cosh c) (log1p a))) (cbrt (fmod (cosh c) (log1p a)))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt 1)))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt 1))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) 1)
(* (pow (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (cbrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (cbrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (cbrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (cbrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (cbrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (cbrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (sqrt (fmod (cosh c) (log1p a))))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (* (sqrt (sqrt (fmod (cosh c) (log1p a)))) (sqrt (sqrt (fmod (cosh c) (log1p a))))) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (sqrt (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3)) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) 3) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(* (pow (sqrt (sqrt (fmod (cosh c) (log1p a)))) (/ 3 2)) (sqrt (sqrt (fmod (cosh c) (log1p a)))))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(pow (pow (fmod (cosh c) (log1p a)) 3) 1/4)
(pow (pow (fmod (cosh c) (log1p a)) 3) 1/4)
(pow (pow (fmod (cosh c) (log1p a)) 3) 1/4)
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
(fmod (cosh c) (log1p a))
"NEW BATCH"
(sin (pow (sqrt (atan2 b b)) (- b a)))
"NEW BATCH"
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(* (log (sqrt (atan2 b b))) (- b a))
(* (log (sqrt (atan2 b b))) (- b a))
(* 1/2 (- b a))
(* 1 (- b a))
(* (/ 1 2) (- b a))
(pow (sqrt (atan2 b b)) b)
(pow (sqrt (atan2 b b)) a)
(pow (sqrt (atan2 b b)) (* (cbrt (- b a)) (cbrt (- b a))))
(pow (sqrt (atan2 b b)) (sqrt (- b a)))
(pow (sqrt (atan2 b b)) 1)
(pow (sqrt (atan2 b b)) (+ (sqrt b) (sqrt a)))
(pow (sqrt (atan2 b b)) 1)
(pow (sqrt (atan2 b b)) b)
(pow (sqrt (atan2 b b)) (- a))
(pow (sqrt (atan2 b b)) b)
(pow (sqrt (atan2 b b)) (- a))
(pow (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b)))) (- b a))
(pow (cbrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b)))) (- b a))
(pow (sqrt (cbrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt 1) (- b a))
(pow (sqrt (atan2 b b)) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow 1 (- b a))
(pow (sqrt (atan2 b b)) (- b a))
(log (pow (sqrt (atan2 b b)) (- b a)))
(exp (pow (sqrt (atan2 b b)) (- b a)))
(* (cbrt (pow (sqrt (atan2 b b)) (- b a))) (cbrt (pow (sqrt (atan2 b b)) (- b a))))
(cbrt (pow (sqrt (atan2 b b)) (- b a)))
(* (* (pow (sqrt (atan2 b b)) (- b a)) (pow (sqrt (atan2 b b)) (- b a))) (pow (sqrt (atan2 b b)) (- b a)))
(/ (- b a) 2)
(sqrt (pow (sqrt (atan2 b b)) (- b a)))
(sqrt (pow (sqrt (atan2 b b)) (- b a)))
(pow (sqrt (atan2 b b)) (/ (- b a) 2))
(pow (sqrt (atan2 b b)) (/ (- b a) 2))
(log (sin (pow (sqrt (atan2 b b)) (- b a))))
(exp (sin (pow (sqrt (atan2 b b)) (- b a))))
(* (cbrt (sin (pow (sqrt (atan2 b b)) (- b a)))) (cbrt (sin (pow (sqrt (atan2 b b)) (- b a)))))
(cbrt (sin (pow (sqrt (atan2 b b)) (- b a))))
(* (* (sin (pow (sqrt (atan2 b b)) (- b a))) (sin (pow (sqrt (atan2 b b)) (- b a)))) (sin (pow (sqrt (atan2 b b)) (- b a))))
(sqrt (sin (pow (sqrt (atan2 b b)) (- b a))))
(sqrt (sin (pow (sqrt (atan2 b b)) (- b a))))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(- (+ (* b (log (sqrt (atan2 b b)))) 1) (* a (log (sqrt (atan2 b b)))))
(pow (sqrt (atan2 b b)) (- b a))
(pow (sqrt (atan2 b b)) (- b a))
(- (+ (* (cos 1) (* b (log (sqrt (atan2 b b))))) (sin 1)) (* a (* (cos 1) (log (sqrt (atan2 b b))))))
(sin (pow (sqrt (atan2 b b)) (- b a)))
(sin (pow (sqrt (atan2 b b)) (- b a)))
"NEW BATCH"
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* 1/2 (- b a))
(* 1 (- b a))
(* (/ 1/2 2) (- b a))
(* (/ 1 2) (- b a))
(* (/ (/ 1 2) 2) (- b a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) a)
(pow (sqrt (sqrt (atan2 b b))) (* (cbrt (- b a)) (cbrt (- b a))))
(pow (sqrt (sqrt (atan2 b b))) (sqrt (- b a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) (+ (sqrt b) (sqrt a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (* (cbrt (sqrt (sqrt (atan2 b b)))) (cbrt (sqrt (sqrt (atan2 b b))))) (- b a))
(pow (cbrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))) (- b a))
(pow (sqrt (cbrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))) (- b a))
(pow (sqrt (sqrt (cbrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt 1)) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt 1) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow 1 (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(exp (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))) (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (* (pow (sqrt (sqrt (atan2 b b))) (- b a)) (pow (sqrt (sqrt (atan2 b b))) (- b a))) (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(/ (- b a) 2)
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* 1/2 (- b a))
(* 1 (- b a))
(* (/ 1/2 2) (- b a))
(* (/ 1 2) (- b a))
(* (/ (/ 1 2) 2) (- b a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) a)
(pow (sqrt (sqrt (atan2 b b))) (* (cbrt (- b a)) (cbrt (- b a))))
(pow (sqrt (sqrt (atan2 b b))) (sqrt (- b a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) (+ (sqrt b) (sqrt a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (* (cbrt (sqrt (sqrt (atan2 b b)))) (cbrt (sqrt (sqrt (atan2 b b))))) (- b a))
(pow (cbrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))) (- b a))
(pow (sqrt (cbrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))) (- b a))
(pow (sqrt (sqrt (cbrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt 1)) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt 1) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow 1 (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(exp (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))) (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (* (pow (sqrt (sqrt (atan2 b b))) (- b a)) (pow (sqrt (sqrt (atan2 b b))) (- b a))) (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(/ (- b a) 2)
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(- (+ (* (log (pow (atan2 b b) 1/4)) b) 1) (* a (log (pow (atan2 b b) 1/4))))
(pow (pow (atan2 b b) 1/4) (- b a))
(pow (pow (atan2 b b) 1/4) (- b a))
(- (+ (* (log (pow (atan2 b b) 1/4)) b) 1) (* a (log (pow (atan2 b b) 1/4))))
(pow (pow (atan2 b b) 1/4) (- b a))
(pow (pow (atan2 b b) 1/4) (- b a))
"NEW BATCH"
(log (pow (sqrt (sqrt (atan2 b b))) b))
(log (pow (sqrt (sqrt (atan2 b b))) (- a)))
(log (pow (sqrt (sqrt (atan2 b b))) b))
(log (pow (sqrt (sqrt (atan2 b b))) (- a)))
(log (pow (* (cbrt (sqrt (sqrt (atan2 b b)))) (cbrt (sqrt (sqrt (atan2 b b))))) (- b a)))
(log (pow (cbrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))) (- b a)))
(log (pow (sqrt (cbrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))) (- b a)))
(log (pow (sqrt (sqrt (cbrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt 1)) (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt 1) (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow 1 (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (* (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))) (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))))
(log (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log (sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log (sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log 1)
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2)))
(log (pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2)))
(log (pow (sqrt (sqrt (atan2 b b))) b))
(log (pow (sqrt (sqrt (atan2 b b))) a))
(log (sqrt (sqrt (atan2 b b))))
(log (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(exp (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(* (cbrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a)))) (cbrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a)))))
(cbrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(* (* (log (pow (sqrt (sqrt (atan2 b b))) (- b a))) (log (pow (sqrt (sqrt (atan2 b b))) (- b a)))) (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(sqrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(sqrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* (log (sqrt (sqrt (atan2 b b)))) (- b a))
(* 1/2 (- b a))
(* 1 (- b a))
(* (/ 1/2 2) (- b a))
(* (/ 1 2) (- b a))
(* (/ (/ 1 2) 2) (- b a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) a)
(pow (sqrt (sqrt (atan2 b b))) (* (cbrt (- b a)) (cbrt (- b a))))
(pow (sqrt (sqrt (atan2 b b))) (sqrt (- b a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) (+ (sqrt b) (sqrt a)))
(pow (sqrt (sqrt (atan2 b b))) 1)
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (sqrt (sqrt (atan2 b b))) b)
(pow (sqrt (sqrt (atan2 b b))) (- a))
(pow (* (cbrt (sqrt (sqrt (atan2 b b)))) (cbrt (sqrt (sqrt (atan2 b b))))) (- b a))
(pow (cbrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))) (- b a))
(pow (sqrt (cbrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))) (- b a))
(pow (sqrt (sqrt (cbrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt 1)) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt 1) (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a))
(pow 1 (- b a))
(pow (sqrt (sqrt (atan2 b b))) (- b a))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(exp (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))) (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(* (* (pow (sqrt (sqrt (atan2 b b))) (- b a)) (pow (sqrt (sqrt (atan2 b b))) (- b a))) (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(/ (- b a) 2)
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2))
(- (* (log (pow (atan2 b b) 1/4)) b) (* a (log (pow (atan2 b b) 1/4))))
(log (pow (pow (atan2 b b) 1/4) (- b a)))
(* (log (pow (atan2 b b) 1/4)) b)
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(- (+ (* (log (pow (atan2 b b) 1/4)) b) 1) (* a (log (pow (atan2 b b) 1/4))))
(pow (pow (atan2 b b) 1/4) (- b a))
(pow (pow (atan2 b b) 1/4) (- b a))
"NEW BATCH"
(log (pow (sqrt (sqrt (atan2 b b))) b))
(log (pow (sqrt (sqrt (atan2 b b))) (- a)))
(log (pow (sqrt (sqrt (atan2 b b))) b))
(log (pow (sqrt (sqrt (atan2 b b))) (- a)))
(log (pow (* (cbrt (sqrt (sqrt (atan2 b b)))) (cbrt (sqrt (sqrt (atan2 b b))))) (- b a)))
(log (pow (cbrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))) (- b a)))
(log (pow (sqrt (cbrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))) (- b a)))
(log (pow (sqrt (sqrt (cbrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt 1)) (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt 1) (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow (sqrt (sqrt (sqrt (atan2 b b)))) (- b a)))
(log (pow 1 (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (* (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))) (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a)))))
(log (cbrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log (sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log (sqrt (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log 1)
(log (pow (sqrt (sqrt (atan2 b b))) (- b a)))
(log (pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2)))
(log (pow (sqrt (sqrt (atan2 b b))) (/ (- b a) 2)))
(log (pow (sqrt (sqrt (atan2 b b))) b))
(log (pow (sqrt (sqrt (atan2 b b))) a))
(log (sqrt (sqrt (atan2 b b))))
(log (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(exp (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(* (cbrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a)))) (cbrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a)))))
(cbrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(* (* (log (pow (sqrt (sqrt (atan2 b b))) (- b a))) (log (pow (sqrt (sqrt (atan2 b b))) (- b a)))) (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(sqrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(sqrt (log (pow (sqrt (sqrt (atan2 b b))) (- b a))))
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(log (sqrt (atan2 b b)))
(exp (sqrt (atan2 b b)))
(* (cbrt (sqrt (atan2 b b))) (cbrt (sqrt (atan2 b b))))
(cbrt (sqrt (atan2 b b)))
(* (* (sqrt (atan2 b b)) (sqrt (atan2 b b))) (sqrt (atan2 b b)))
(sqrt (* (cbrt (atan2 b b)) (cbrt (atan2 b b))))
(sqrt (cbrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(sqrt 1)
(sqrt (atan2 b b))
(/ 1 2)
(sqrt (sqrt (atan2 b b)))
(sqrt (sqrt (atan2 b b)))
(- (* (log (pow (atan2 b b) 1/4)) b) (* a (log (pow (atan2 b b) 1/4))))
(log (pow (pow (atan2 b b) 1/4) (- b a)))
(* (log (pow (atan2 b b) 1/4)) b)
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
(sqrt (atan2 b b))
"NEW BATCH"
(fmod (sinh c) (- c (pow -2.9807307601812193e+165 2.0)))
"NEW BATCH"
(- (exp c) (exp (- c)))
(log (sinh c))
(exp (sinh c))
(* (cbrt (sinh c)) (cbrt (sinh c)))
(cbrt (sinh c))
(* (* (sinh c) (sinh c)) (sinh c))
(sqrt (sinh c))
(sqrt (sinh c))
(+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
(* 1/2 (- (exp c) (exp (- c))))
(* 1/2 (- (exp c) (exp (* -1 c))))
"NEW BATCH"
(+ (log 1/6) (* (log c) 3))
(+ (log 1/6) (* (log c) 3))
(+ (log 1/6) (log (pow c 3)))
(log (* 1/6 (pow c 3)))
(exp (* 1/6 (pow c 3)))
(* (* (* 1/6 1/6) 1/6) (* (* (pow c 3) (pow c 3)) (pow c 3)))
(* (cbrt (* 1/6 (pow c 3))) (cbrt (* 1/6 (pow c 3))))
(cbrt (* 1/6 (pow c 3)))
(* (* (* 1/6 (pow c 3)) (* 1/6 (pow c 3))) (* 1/6 (pow c 3)))
(sqrt (* 1/6 (pow c 3)))
(sqrt (* 1/6 (pow c 3)))
(* (sqrt 1/6) (pow (sqrt c) 3))
(* (sqrt 1/6) (pow (sqrt c) 3))
(* (sqrt 1/6) (pow (sqrt c) 3))
(* (sqrt 1/6) (pow (sqrt c) 3))
(* (sqrt 1/6) (sqrt (pow c 3)))
(* (sqrt 1/6) (sqrt (pow c 3)))
(* (sqrt 1/6) (pow c (/ 3 2)))
(* (sqrt 1/6) (pow c (/ 3 2)))
(* 1/6 (pow (* (cbrt c) (cbrt c)) 3))
(* 1/6 (pow (sqrt c) 3))
(* 1/6 (pow 1 3))
(* 1/6 (* c c))
(* 1/6 (* (cbrt (pow c 3)) (cbrt (pow c 3))))
(* 1/6 (pow (* (cbrt c) (cbrt c)) 3))
(* 1/6 (pow (sqrt c) 3))
(* 1/6 (pow 1 3))
(* 1/6 c)
(* 1/6 (sqrt (pow c 3)))
(* 1/6 1)
(* 1/6 (pow c (/ 3 2)))
(* (cbrt 1/6) (pow c 3))
(* (sqrt 1/6) (pow c 3))
(* 1/6 (pow c 3))
(+ (log 1/120) (* (log c) 5))
(+ (log 1/120) (* (log c) 5))
(+ (log 1/120) (log (pow c 5)))
(log (* 1/120 (pow c 5)))
(exp (* 1/120 (pow c 5)))
(* (* (* 1/120 1/120) 1/120) (* (* (pow c 5) (pow c 5)) (pow c 5)))
(* (cbrt (* 1/120 (pow c 5))) (cbrt (* 1/120 (pow c 5))))
(cbrt (* 1/120 (pow c 5)))
(* (* (* 1/120 (pow c 5)) (* 1/120 (pow c 5))) (* 1/120 (pow c 5)))
(sqrt (* 1/120 (pow c 5)))
(sqrt (* 1/120 (pow c 5)))
(* (sqrt 1/120) (pow (sqrt c) 5))
(* (sqrt 1/120) (pow (sqrt c) 5))
(* (sqrt 1/120) (sqrt (pow c 5)))
(* (sqrt 1/120) (sqrt (pow c 5)))
(* (sqrt 1/120) (pow c (/ 5 2)))
(* (sqrt 1/120) (pow c (/ 5 2)))
(* 1/120 (pow (* (cbrt c) (cbrt c)) 5))
(* 1/120 (pow (sqrt c) 5))
(* 1/120 (pow 1 5))
(* 1/120 (* (cbrt (pow c 5)) (cbrt (pow c 5))))
(* 1/120 (sqrt (pow c 5)))
(* 1/120 1)
(* 1/120 (pow c (/ 5 2)))
(* (cbrt 1/120) (pow c 5))
(* (sqrt 1/120) (pow c 5))
(* 1/120 (pow c 5))
(* (exp (* 1/6 (pow c 3))) (* (exp (* 1/120 (pow c 5))) (exp c)))
(* (exp (* 1/6 (pow c 3))) (exp (+ (* 1/120 (pow c 5)) c)))
(log (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(exp (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(* (cbrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))) (cbrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))))
(cbrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(* (* (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)) (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))) (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(sqrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(sqrt (+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c)))
(+ (pow (* 1/6 (pow c 3)) 3) (pow (+ (* 1/120 (pow c 5)) c) 3))
(+ (* (* 1/6 (pow c 3)) (* 1/6 (pow c 3))) (- (* (+ (* 1/120 (pow c 5)) c) (+ (* 1/120 (pow c 5)) c)) (* (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))))
(- (* (* 1/6 (pow c 3)) (* 1/6 (pow c 3))) (* (+ (* 1/120 (pow c 5)) c) (+ (* 1/120 (pow c 5)) c)))
(- (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
(+ (* 1/6 (pow c 3)) (* 1/120 (pow c 5)))
(* 1/6 (pow c 3))
(* 1/6 (pow c 3))
(* 1/6 (pow c 3))
(* 1/120 (pow c 5))
(* 1/120 (pow c 5))
(* 1/120 (pow c 5))
(+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
(+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
(+ (* 1/6 (pow c 3)) (+ (* 1/120 (pow c 5)) c))
"NEW BATCH"
(/ (- x lo) (- hi lo))
"NEW BATCH"
(- (log (- x lo)) (log (- hi lo)))
(log (/ (- x lo) (- hi lo)))
(exp (/ (- x lo) (- hi lo)))
(/ (* (* (- x lo) (- x lo)) (- x lo)) (* (* (- hi lo) (- hi lo)) (- hi lo)))
(* (cbrt (/ (- x lo) (- hi lo))) (cbrt (/ (- x lo) (- hi lo))))
(cbrt (/ (- x lo) (- hi lo)))
(* (* (/ (- x lo) (- hi lo)) (/ (- x lo) (- hi lo))) (/ (- x lo) (- hi lo)))
(sqrt (/ (- x lo) (- hi lo)))
(sqrt (/ (- x lo) (- hi lo)))
(- (- x lo))
(- (- hi lo))
(/ x (- hi lo))
(/ lo (- hi lo))
(/ (* (cbrt (- x lo)) (cbrt (- x lo))) (* (cbrt (- hi lo)) (cbrt (- hi lo))))
(/ (cbrt (- x lo)) (cbrt (- hi lo)))
(/ (* (cbrt (- x lo)) (cbrt (- x lo))) (sqrt (- hi lo)))
(/ (cbrt (- x lo)) (sqrt (- hi lo)))
(/ (* (cbrt (- x lo)) (cbrt (- x lo))) 1)
(/ (cbrt (- x lo)) (- hi lo))
(/ (* (cbrt (- x lo)) (cbrt (- x lo))) (+ (sqrt hi) (sqrt lo)))
(/ (cbrt (- x lo)) (- (sqrt hi) (sqrt lo)))
(/ (* (cbrt (- x lo)) (cbrt (- x lo))) 1)
(/ (cbrt (- x lo)) (- hi lo))
(/ (sqrt (- x lo)) (* (cbrt (- hi lo)) (cbrt (- hi lo))))
(/ (sqrt (- x lo)) (cbrt (- hi lo)))
(/ (sqrt (- x lo)) (sqrt (- hi lo)))
(/ (sqrt (- x lo)) (sqrt (- hi lo)))
(/ (sqrt (- x lo)) 1)
(/ (sqrt (- x lo)) (- hi lo))
(/ (sqrt (- x lo)) (+ (sqrt hi) (sqrt lo)))
(/ (sqrt (- x lo)) (- (sqrt hi) (sqrt lo)))
(/ (sqrt (- x lo)) 1)
(/ (sqrt (- x lo)) (- hi lo))
(/ 1 (* (cbrt (- hi lo)) (cbrt (- hi lo))))
(/ (- x lo) (cbrt (- hi lo)))
(/ 1 (sqrt (- hi lo)))
(/ (- x lo) (sqrt (- hi lo)))
(/ 1 1)
(/ (- x lo) (- hi lo))
(/ 1 (+ (sqrt hi) (sqrt lo)))
(/ (- x lo) (- (sqrt hi) (sqrt lo)))
(/ 1 1)
(/ (- x lo) (- hi lo))
(/ (+ (sqrt x) (sqrt lo)) (* (cbrt (- hi lo)) (cbrt (- hi lo))))
(/ (- (sqrt x) (sqrt lo)) (cbrt (- hi lo)))
(/ (+ (sqrt x) (sqrt lo)) (sqrt (- hi lo)))
(/ (- (sqrt x) (sqrt lo)) (sqrt (- hi lo)))
(/ (+ (sqrt x) (sqrt lo)) 1)
(/ (- (sqrt x) (sqrt lo)) (- hi lo))
(/ (+ (sqrt x) (sqrt lo)) (+ (sqrt hi) (sqrt lo)))
(/ (- (sqrt x) (sqrt lo)) (- (sqrt hi) (sqrt lo)))
(/ (+ (sqrt x) (sqrt lo)) 1)
(/ (- (sqrt x) (sqrt lo)) (- hi lo))
(/ 1 (* (cbrt (- hi lo)) (cbrt (- hi lo))))
(/ (- x lo) (cbrt (- hi lo)))
(/ 1 (sqrt (- hi lo)))
(/ (- x lo) (sqrt (- hi lo)))
(/ 1 1)
(/ (- x lo) (- hi lo))
(/ 1 (+ (sqrt hi) (sqrt lo)))
(/ (- x lo) (- (sqrt hi) (sqrt lo)))
(/ 1 1)
(/ (- x lo) (- hi lo))
(/ 1 (- hi lo))
(/ (- hi lo) (- x lo))
(/ (- x lo) (* (cbrt (- hi lo)) (cbrt (- hi lo))))
(/ (- x lo) (sqrt (- hi lo)))
(/ (- x lo) 1)
(/ (- x lo) (+ (sqrt hi) (sqrt lo)))
(/ (- x lo) 1)
(/ (- hi lo) (cbrt (- x lo)))
(/ (- hi lo) (sqrt (- x lo)))
(/ (- hi lo) (- x lo))
(/ (- hi lo) (- (sqrt x) (sqrt lo)))
(/ (- hi lo) (- x lo))
(/ (- x lo) (- (pow hi 3) (pow lo 3)))
(/ (- x lo) (- (* hi hi) (* lo lo)))
(* (- hi lo) (+ (* x x) (+ (* lo lo) (* x lo))))
(* (- hi lo) (+ x lo))
0
0
0
